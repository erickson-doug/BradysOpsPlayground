items:
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  commentId: T:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  id: UriQueryBuilder
  parent: Microsoft.WindowsAzure.Storage.Core
  children:
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.#ctor
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.#ctor(Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder)
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Add(System.String,System.String)
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(Microsoft.WindowsAzure.Storage.StorageUri)
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(System.Uri)
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUriCore(System.Uri)
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Item(System.String)
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Parameters
  - Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.ToString
  langs:
  - csharp
  - vb
  name: UriQueryBuilder
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  type: Class
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: UriQueryBuilder
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 31
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nA convenience class for constructing URI query strings.\r\n"
  example: []
  syntax:
    content: public class UriQueryBuilder
    content.vb: Public Class UriQueryBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.#ctor
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: UriQueryBuilder()
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.UriQueryBuilder()
  type: Constructor
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.\r\n"
  example: []
  syntax:
    content: public UriQueryBuilder()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.#ctor(Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder)
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.#ctor(Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder)
  id: '#ctor(Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder)'
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: UriQueryBuilder(UriQueryBuilder)
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.UriQueryBuilder(Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder)
  type: Constructor
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 47
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\r\n"
  example: []
  syntax:
    content: public UriQueryBuilder(UriQueryBuilder builder)
    content.vb: Public Sub New(builder As UriQueryBuilder)
    parameters:
    - id: builder
      type: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
      description: The <xref href="Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder" data-throw-if-not-resolved="false"></xref> whose elements are copied to the new <xref href="Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Parameters
  commentId: P:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Parameters
  id: Parameters
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: Parameters
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Parameters
  type: Property
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Parameters
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 57
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nStores the query parameters.\r\n"
  example: []
  syntax:
    content: >-
      protected IDictionary<string, string> Parameters

      {
          get;
      }
    content.vb: Protected ReadOnly Property Parameters As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Item(System.String)
  commentId: P:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Item[System.String]
  type: Property
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: this[]
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 63
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nGets the query string value associated with the given name.\r\n"
  example: []
  syntax:
    content: >-
      public string this[string name]

      {
          get;
      }
    content.vb: Public ReadOnly Property Item(name As String) As String
    parameters:
    - id: name
      type: System.String
      description: The query string name.
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Add(System.String,System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: Add(String, String)
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.Add(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Add
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 84
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nAdd the query string value with URI escaping.\r\n"
  example: []
  syntax:
    content: public virtual void Add(string name, string value)
    content.vb: Public Overridable Sub Add(name As String, value As String)
    parameters:
    - id: name
      type: System.String
      description: The query string name.
    - id: value
      type: System.String
      description: The query string value.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<KeyValuePair<String, String>>)
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: AddRange
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 98
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nAdd multiple query string values with URI escaping.\r\n"
  example: []
  syntax:
    content: public void AddRange(IEnumerable<KeyValuePair<string, string>> parameters)
    content.vb: Public Sub AddRange(parameters As IEnumerable(Of KeyValuePair(Of String, String)))
    parameters:
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: The set of query string name/value pairs
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddRange(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)))
  name.vb: AddRange(IEnumerable(Of KeyValuePair(Of String, String)))
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.ToString
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.ToString
  id: ToString
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ToString
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 114
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the URI.\r\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\r\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the URI.\r\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(Microsoft.WindowsAzure.Storage.StorageUri)
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(Microsoft.WindowsAzure.Storage.StorageUri)
  id: AddToUri(Microsoft.WindowsAzure.Storage.StorageUri)
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: AddToUri(StorageUri)
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(Microsoft.WindowsAzure.Storage.StorageUri)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: AddToUri
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 147
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nAdds a query parameter to a URI.\r\n"
  example: []
  syntax:
    content: public StorageUri AddToUri(StorageUri storageUri)
    content.vb: Public Function AddToUri(storageUri As StorageUri) As StorageUri
    parameters:
    - id: storageUri
      type: Microsoft.WindowsAzure.Storage.StorageUri
      description: A <xref href="Microsoft.WindowsAzure.Storage.StorageUri" data-throw-if-not-resolved="false"></xref> containing the original URI, including any existing query parameters.
    return:
      type: Microsoft.WindowsAzure.Storage.StorageUri
      description: A <xref href="Microsoft.WindowsAzure.Storage.StorageUri" data-throw-if-not-resolved="false"></xref> object with the new query parameter appended.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(System.Uri)
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(System.Uri)
  id: AddToUri(System.Uri)
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: AddToUri(Uri)
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUri(System.Uri)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: AddToUri
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 161
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nAdds a query parameter to a URI.\r\n"
  example: []
  syntax:
    content: public virtual Uri AddToUri(Uri uri)
    content.vb: Public Overridable Function AddToUri(uri As Uri) As Uri
    parameters:
    - id: uri
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> object containing the original URI, including any existing query parameters.
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> object with the new query parameter appended.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUriCore(System.Uri)
  commentId: M:Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUriCore(System.Uri)
  id: AddToUriCore(System.Uri)
  parent: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  langs:
  - csharp
  - vb
  name: AddToUriCore(Uri)
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder.AddToUriCore(System.Uri)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Core/UriQueryBuilder.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: AddToUriCore
    path: src/Storage/Common/Core/UriQueryBuilder.cs
    startLine: 171
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Core
  summary: "\r\nAdds a query parameter to a URI.\r\n"
  example: []
  syntax:
    content: protected Uri AddToUriCore(Uri uri)
    content.vb: Protected Function AddToUriCore(uri As Uri) As Uri
    parameters:
    - id: uri
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> object containing the original URI, including any existing query parameters.
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> object with the new query parameter appended.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.WindowsAzure.Storage.Core
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Core
  fullName: Microsoft.WindowsAzure.Storage.Core
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
  parent: Microsoft.WindowsAzure.Storage.Core
  isExternal: false
  name: UriQueryBuilder
  fullName: Microsoft.WindowsAzure.Storage.Core.UriQueryBuilder
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.StorageUri
  parent: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: StorageUri
  fullName: Microsoft.WindowsAzure.Storage.StorageUri
- uid: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  fullName: System.Uri
