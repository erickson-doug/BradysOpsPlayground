items:
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableQuery
  id: TableQuery
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.CombineFilters(System.String,System.String,System.String)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.FilterString
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterCondition(System.String,System.String,System.String)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBinary(System.String,System.String,System.Byte[])
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBool(System.String,System.String,System.Boolean)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDate(System.String,System.String,System.DateTimeOffset)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDouble(System.String,System.String,System.Double)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForGuid(System.String,System.String,System.Guid)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForInt(System.String,System.String,System.Int32)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForLong(System.String,System.String,System.Int64)
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.Select(System.Collections.Generic.IList{System.String})
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.SelectColumns
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.Take(System.Nullable{System.Int32})
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.TakeCount
  - Microsoft.WindowsAzure.Storage.Table.TableQuery.Where(System.String)
  langs:
  - csharp
  - vb
  name: TableQuery
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
  type: Class
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: TableQuery
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 35
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nRepresents a query against a specified table.\r\n"
  example: []
  syntax:
    content: public sealed class TableQuery
    content.vb: Public NotInheritable Class TableQuery
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterCondition(System.String,System.String,System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterCondition(System.String,System.String,System.String)
  id: GenerateFilterCondition(System.String,System.String,System.String)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterCondition(String, String, String)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterCondition(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterCondition
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 46
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for the string value.\r\n"
  example: []
  syntax:
    content: public static string GenerateFilterCondition(string propertyName, string operation, string givenValue)
    content.vb: Public Shared Function GenerateFilterCondition(propertyName As String, operation As String, givenValue As String) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.String
      description: A string containing the value to compare with the property.
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBool(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBool(System.String,System.String,System.Boolean)
  id: GenerateFilterConditionForBool(System.String,System.String,System.Boolean)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterConditionForBool(String, String, Boolean)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBool(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterConditionForBool
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 59
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for the boolean value.\r\n"
  example: []
  syntax:
    content: public static string GenerateFilterConditionForBool(string propertyName, string operation, bool givenValue)
    content.vb: Public Shared Function GenerateFilterConditionForBool(propertyName As String, operation As String, givenValue As Boolean) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.Boolean
      description: A <code>bool</code> containing the value to compare with the property.
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBinary(System.String,System.String,System.Byte[])
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBinary(System.String,System.String,System.Byte[])
  id: GenerateFilterConditionForBinary(System.String,System.String,System.Byte[])
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterConditionForBinary(String, String, Byte[])
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBinary(System.String, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterConditionForBinary
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 71
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for the binary value.\r\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1118:ParameterMustNotSpanMultipleLines", Justification = "Needed for Common Code preprocessor directives.")]

      public static string GenerateFilterConditionForBinary(string propertyName, string operation, [ReadOnlyArray] byte[] givenValue)
    content.vb: >-
      <SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1118:ParameterMustNotSpanMultipleLines", Justification:="Needed for Common Code preprocessor directives.")>

      Public Shared Function GenerateFilterConditionForBinary(propertyName As String, operation As String, givenValue As Byte()) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.Byte[]
      description: A byte array containing the value to compare with the property.
      attributes:
      - type: System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute
        ctor: System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute.#ctor
        arguments: []
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: StyleCop.CSharp.ReadabilityRules
    - type: System.String
      value: SA1118:ParameterMustNotSpanMultipleLines
    namedArguments:
    - name: Justification
      type: System.String
      value: Needed for Common Code preprocessor directives.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForBinary(System.String, System.String, System.Byte())
  name.vb: GenerateFilterConditionForBinary(String, String, Byte())
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDate(System.String,System.String,System.DateTimeOffset)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDate(System.String,System.String,System.DateTimeOffset)
  id: GenerateFilterConditionForDate(System.String,System.String,System.DateTimeOffset)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterConditionForDate(String, String, DateTimeOffset)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDate(System.String, System.String, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterConditionForDate
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 99
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value.\r\n"
  example: []
  syntax:
    content: public static string GenerateFilterConditionForDate(string propertyName, string operation, DateTimeOffset givenValue)
    content.vb: Public Shared Function GenerateFilterConditionForDate(propertyName As String, operation As String, givenValue As DateTimeOffset) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.DateTimeOffset
      description: A <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> containing the value to compare with the property.
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDouble(System.String,System.String,System.Double)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDouble(System.String,System.String,System.Double)
  id: GenerateFilterConditionForDouble(System.String,System.String,System.Double)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterConditionForDouble(String, String, Double)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForDouble(System.String, System.String, System.Double)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterConditionForDouble
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 111
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.\r\n"
  example: []
  syntax:
    content: public static string GenerateFilterConditionForDouble(string propertyName, string operation, double givenValue)
    content.vb: Public Shared Function GenerateFilterConditionForDouble(propertyName As String, operation As String, givenValue As Double) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.Double
      description: A <xref href="System.Double" data-throw-if-not-resolved="false"></xref> containing the value to compare with the property.
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForInt(System.String,System.String,System.Int32)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForInt(System.String,System.String,System.Int32)
  id: GenerateFilterConditionForInt(System.String,System.String,System.Int32)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterConditionForInt(String, String, Int32)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForInt(System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterConditionForInt
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 123
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.\r\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly", MessageId = "ForInt", Justification = "Reviewed")]

      public static string GenerateFilterConditionForInt(string propertyName, string operation, int givenValue)
    content.vb: >-
      <SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly", MessageId:="ForInt", Justification:="Reviewed")>

      Public Shared Function GenerateFilterConditionForInt(propertyName As String, operation As String, givenValue As Integer) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.Int32
      description: An <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> containing the value to compare with the property.
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Naming
    - type: System.String
      value: CA1702:CompoundWordsShouldBeCasedCorrectly
    namedArguments:
    - name: MessageId
      type: System.String
      value: ForInt
    - name: Justification
      type: System.String
      value: Reviewed
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForLong(System.String,System.String,System.Int64)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForLong(System.String,System.String,System.Int64)
  id: GenerateFilterConditionForLong(System.String,System.String,System.Int64)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterConditionForLong(String, String, Int64)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForLong(System.String, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterConditionForLong
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 136
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.\r\n"
  example: []
  syntax:
    content: public static string GenerateFilterConditionForLong(string propertyName, string operation, long givenValue)
    content.vb: Public Shared Function GenerateFilterConditionForLong(propertyName As String, operation As String, givenValue As Long) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.Int64
      description: An <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> containing the value to compare with the property.
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForGuid(System.String,System.String,System.Guid)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForGuid(System.String,System.String,System.Guid)
  id: GenerateFilterConditionForGuid(System.String,System.String,System.Guid)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: GenerateFilterConditionForGuid(String, String, Guid)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.GenerateFilterConditionForGuid(System.String, System.String, System.Guid)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GenerateFilterConditionForGuid
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 148
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGenerates a property filter condition string for the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value.\r\n"
  example: []
  syntax:
    content: public static string GenerateFilterConditionForGuid(string propertyName, string operation, Guid givenValue)
    content.vb: Public Shared Function GenerateFilterConditionForGuid(propertyName As String, operation As String, givenValue As Guid) As String
    parameters:
    - id: propertyName
      type: System.String
      description: A string containing the name of the property to compare.
    - id: operation
      type: System.String
      description: A string containing the comparison operator to use.
    - id: givenValue
      type: System.Guid
      description: A <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> containing the value to compare with the property.
    return:
      type: System.String
      description: A string containing the formatted filter condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.CombineFilters(System.String,System.String,System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.CombineFilters(System.String,System.String,System.String)
  id: CombineFilters(System.String,System.String,System.String)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: CombineFilters(String, String, String)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.CombineFilters(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CombineFilters
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 208
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nCreates a filter condition using the specified logical operator on two filter conditions.\r\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string", Justification = "Back compatibility.")]

      public static string CombineFilters(string filterA, string operatorString, string filterB)
    content.vb: >-
      <SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId:="string", Justification:="Back compatibility.")>

      Public Shared Function CombineFilters(filterA As String, operatorString As String, filterB As String) As String
    parameters:
    - id: filterA
      type: System.String
      description: A string containing the first formatted filter condition.
    - id: operatorString
      type: System.String
      description: A string containing the operator to use (AND, OR).
    - id: filterB
      type: System.String
      description: A string containing the second formatted filter condition.
    return:
      type: System.String
      description: A string containing the combined filter expression.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Naming
    - type: System.String
      value: CA1720:IdentifiersShouldNotContainTypeNames
    namedArguments:
    - name: MessageId
      type: System.String
      value: string
    - name: Justification
      type: System.String
      value: Back compatibility.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.TakeCount
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableQuery.TakeCount
  id: TakeCount
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: TakeCount
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.TakeCount
  type: Property
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: TakeCount
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 224
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets or sets the number of entities the table query will return. \r\n"
  example: []
  syntax:
    content: >-
      public int ? TakeCount

      {

          get;

          set;

      }
    content.vb: Public Property TakeCount As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
      description: The maximum number of entities for the table query to return.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.FilterString
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableQuery.FilterString
  id: FilterString
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: FilterString
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.FilterString
  type: Property
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: FilterString
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 246
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets or sets the filter expression to use in the table query.\r\n"
  example: []
  syntax:
    content: >-
      public string FilterString

      {

          get;

          set;

      }
    content.vb: Public Property FilterString As String
    parameters: []
    return:
      type: System.String
      description: A string containing the filter expression to use in the query.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.SelectColumns
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableQuery.SelectColumns
  id: SelectColumns
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: SelectColumns
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.SelectColumns
  type: Property
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SelectColumns
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 252
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets or sets the property names of the table entity properties to return when the table query is executed.\r\n"
  example: []
  syntax:
    content: >-
      public IList<string> SelectColumns

      {

          get;

          set;

      }
    content.vb: Public Property SelectColumns As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: A list of strings containing the property names of the table entity properties to return when the query is executed.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.Select(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.Select(System.Collections.Generic.IList{System.String})
  id: Select(System.Collections.Generic.IList{System.String})
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: Select(IList<String>)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.Select(System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Select
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 260
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nDefines the property names of the table entity properties to return when the table query is executed. \r\n"
  remarks: The select clause is optional on a table query, used to limit the table properties returned from the server. By default, a query will return all properties from the table entity.
  example: []
  syntax:
    content: public TableQuery Select(IList<string> columns)
    content.vb: Public Function Select(columns As IList(Of String)) As TableQuery
    parameters:
    - id: columns
      type: System.Collections.Generic.IList{System.String}
      description: A list of string objects containing the property names of the table entity properties to return when the query is executed.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance set with the table entity properties to return.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuery.Select(System.Collections.Generic.IList(Of System.String))
  name.vb: Select(IList(Of String))
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.Take(System.Nullable{System.Int32})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.Take(System.Nullable{System.Int32})
  id: Take(System.Nullable{System.Int32})
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: Take(Nullable<Int32>)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.Take(System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Take
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 271
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nDefines the upper bound for the number of entities the query returns.\r\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames", MessageId = "0#", Justification = "Reviewed.")]

      public TableQuery Take(int ? take)
    content.vb: >-
      <SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames", MessageId:="0#", Justification:="Reviewed.")>

      Public Function Take(take As Integer?) As TableQuery
    parameters:
    - id: take
      type: System.Nullable{System.Int32}
      description: The maximum number of entities for the table query to return.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance set with the number of entities to return.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Naming
    - type: System.String
      value: CA1719:ParameterNamesShouldNotMatchMemberNames
    namedArguments:
    - name: MessageId
      type: System.String
      value: 0#
    - name: Justification
      type: System.String
      value: Reviewed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableQuery.Take(System.Nullable(Of System.Int32))
  name.vb: Take(Nullable(Of Int32))
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery.Where(System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableQuery.Where(System.String)
  id: Where(System.String)
  parent: Microsoft.WindowsAzure.Storage.Table.TableQuery
  langs:
  - csharp
  - vb
  name: Where(String)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery.Where(System.String)
  type: Method
  source:
    remote:
      path: src/Storage/Common/Table/TableQuery.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Where
    path: src/Storage/Common/Table/TableQuery.Common.cs
    startLine: 284
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nDefines a filter expression for the table query. Only entities that satisfy the specified filter expression will be returned by the query. \r\n"
  remarks: Setting a filter expression is optional; by default, all entities in the table are returned if no filter expression is specified in the table query.
  example: []
  syntax:
    content: public TableQuery Where(string filter)
    content.vb: Public Function Where(filter As String) As TableQuery
    parameters:
    - id: filter
      type: System.String
      description: A string containing the filter expression to apply to the table query.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance set with the filter on entities to return.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  fullName: System.Double
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  fullName: System.Int64
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  fullName: System.Guid
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableQuery
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
