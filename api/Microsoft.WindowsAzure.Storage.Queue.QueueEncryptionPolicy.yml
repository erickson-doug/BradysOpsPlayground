items:
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  commentId: T:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  id: QueueEncryptionPolicy
  parent: Microsoft.WindowsAzure.Storage.Queue
  children:
  - Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  - Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  - Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  langs:
  - csharp
  - vb
  name: QueueEncryptionPolicy
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  type: Class
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: QueueEncryptionPolicy
    path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 33
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nRepresents an encryption policy for performing envelope encryption/decryption of messages in Azure queue.\r\n"
  example: []
  syntax:
    content: public sealed class QueueEncryptionPolicy
    content.vb: Public NotInheritable Class QueueEncryptionPolicy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  commentId: P:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  id: Key
  parent: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  langs:
  - csharp
  - vb
  name: Key
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  type: Property
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Key
    path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nAn object of type <xref href=\"Microsoft.Azure.KeyVault.Core.IKey\" data-throw-if-not-resolved=\"false\"></xref> that is used to wrap/unwrap the content key during encryption.\r\n"
  example: []
  syntax:
    content: >-
      public IKey Key

      {

          get;

      }
    content.vb: Public ReadOnly Property Key As IKey
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Core.IKey
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  commentId: P:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  id: KeyResolver
  parent: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  langs:
  - csharp
  - vb
  name: KeyResolver
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  type: Property
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: KeyResolver
    path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 44
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nGets or sets the key resolver used to select the correct key for decrypting existing queue messages.\r\n"
  example: []
  syntax:
    content: >-
      public IKeyResolver KeyResolver

      {

          get;

      }
    content.vb: Public ReadOnly Property KeyResolver As IKeyResolver
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Core.IKeyResolver
      description: A resolver that returns an <xref href="Microsoft.Azure.KeyVault.Core.IKeyResolver" data-throw-if-not-resolved="false"></xref>, given a key ID.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  commentId: M:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  id: '#ctor(Microsoft.Azure.KeyVault.Core.IKey,Microsoft.Azure.KeyVault.Core.IKeyResolver)'
  parent: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  langs:
  - csharp
  - vb
  name: QueueEncryptionPolicy(IKey, IKeyResolver)
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.QueueEncryptionPolicy(Microsoft.Azure.KeyVault.Core.IKey, Microsoft.Azure.KeyVault.Core.IKeyResolver)
  type: Constructor
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/Storage/Lib/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 56
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key and resolver.\r\n"
  remarks: >-
    If the generated policy is to be used for encryption, users are expected to provide a key at the minimum.

    The absence of key will cause an exception to be thrown during encryption.<br />

    If the generated policy is intended to be used for decryption, users can provide a key resolver. The client library will:<br />

    1. Invoke the key resolver, if specified, to get the key.<br />

    2. If resolver is not specified but a key is specified, the client library will match the key ID against the key and use the key.
  example: []
  syntax:
    content: public QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)
    content.vb: Public Sub New(key As IKey, keyResolver As IKeyResolver)
    parameters:
    - id: key
      type: Microsoft.Azure.KeyVault.Core.IKey
      description: An object of type <xref href="Microsoft.Azure.KeyVault.Core.IKey" data-throw-if-not-resolved="false"></xref> that is used to wrap/unwrap the content encryption key.
    - id: keyResolver
      type: Microsoft.Azure.KeyVault.Core.IKeyResolver
      description: The key resolver used to select the correct key for decrypting existing queue messages.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.Queue
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Queue
  fullName: Microsoft.WindowsAzure.Storage.Queue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.Core.IKey
  parent: Microsoft.Azure.KeyVault.Core
  isExternal: true
  name: IKey
  fullName: Microsoft.Azure.KeyVault.Core.IKey
- uid: Microsoft.Azure.KeyVault.Core
  isExternal: false
  name: Microsoft.Azure.KeyVault.Core
  fullName: Microsoft.Azure.KeyVault.Core
- uid: Microsoft.Azure.KeyVault.Core.IKeyResolver
  parent: Microsoft.Azure.KeyVault.Core
  isExternal: true
  name: IKeyResolver
  fullName: Microsoft.Azure.KeyVault.Core.IKeyResolver
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  parent: Microsoft.WindowsAzure.Storage.Queue
  isExternal: false
  name: QueueEncryptionPolicy
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
