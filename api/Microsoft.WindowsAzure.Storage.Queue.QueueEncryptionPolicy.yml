items:
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  commentId: T:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  id: QueueEncryptionPolicy
  parent: Microsoft.WindowsAzure.Storage.Queue
  children:
  - Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.#ctor(IKey,IKeyResolver)
  - Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  - Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  langs:
  - csharp
  - vb
  name: QueueEncryptionPolicy
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  type: Class
  source:
    remote:
      path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: QueueEncryptionPolicy
    path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 33
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nRepresents an encryption policy for performing envelope encryption/decryption of messages in Azure queue.\r\n"
  example: []
  syntax:
    content: 'public sealed class QueueEncryptionPolicy : object'
    content.vb: >-
      Public NotInheritable Class QueueEncryptionPolicy
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  commentId: P:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  id: Key
  parent: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  langs:
  - csharp
  - vb
  name: Key
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.Key
  type: Property
  source:
    remote:
      path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Key
    path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nAn object of type <see cref=\"!:IKey\"></see> that is used to wrap/unwrap the content key during encryption.\r\n"
  example: []
  syntax:
    content: >-
      public IKey Key

      {
          get;
      }
    content.vb: Public ReadOnly Property Key As IKey
    parameters: []
    return:
      type: IKey
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  commentId: P:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  id: KeyResolver
  parent: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  langs:
  - csharp
  - vb
  name: KeyResolver
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.KeyResolver
  type: Property
  source:
    remote:
      path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: KeyResolver
    path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 44
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nGets or sets the key resolver used to select the correct key for decrypting existing queue messages.\r\n"
  example: []
  syntax:
    content: >-
      public IKeyResolver KeyResolver

      {
          get;
      }
    content.vb: Public ReadOnly Property KeyResolver As IKeyResolver
    parameters: []
    return:
      type: IKeyResolver
      description: A resolver that returns an <see cref="!:IKeyResolver"></see>, given a key ID.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.#ctor(IKey,IKeyResolver)
  commentId: M:Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.#ctor(IKey,IKeyResolver)
  id: '#ctor(IKey,IKeyResolver)'
  parent: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  langs:
  - csharp
  - vb
  name: QueueEncryptionPolicy(IKey, IKeyResolver)
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy.QueueEncryptionPolicy(IKey, IKeyResolver)
  type: Constructor
  source:
    remote:
      path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/ClassLibraryCommon/Queue/QueueEncryptionPolicy.cs
    startLine: 56
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Queue
  summary: "\r\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key and resolver.\r\n"
  remarks: >-
    If the generated policy is to be used for encryption, users are expected to provide a key at the minimum.

    The absence of key will cause an exception to be thrown during encryption.<br />

    If the generated policy is intended to be used for decryption, users can provide a key resolver. The client library will:<br />

    1. Invoke the key resolver, if specified, to get the key.<br />

    2. If resolver is not specified but a key is specified, the client library will match the key ID against the key and use the key.
  example: []
  syntax:
    content: public QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)
    content.vb: Public Sub New(key As IKey, keyResolver As IKeyResolver)
    parameters:
    - id: key
      type: IKey
      description: An object of type <see cref="!:IKey"></see> that is used to wrap/unwrap the content encryption key.
    - id: keyResolver
      type: IKeyResolver
      description: The key resolver used to select the correct key for decrypting existing queue messages.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.Queue
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Queue
  fullName: Microsoft.WindowsAzure.Storage.Queue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: IKey
  isExternal: true
  name: IKey
  fullName: IKey
- uid: IKeyResolver
  isExternal: true
  name: IKeyResolver
  fullName: IKeyResolver
- uid: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
  parent: Microsoft.WindowsAzure.Storage.Queue
  isExternal: false
  name: QueueEncryptionPolicy
  fullName: Microsoft.WindowsAzure.Storage.Queue.QueueEncryptionPolicy
