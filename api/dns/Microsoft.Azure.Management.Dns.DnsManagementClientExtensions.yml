items:
- uid: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions
  commentId: T:Microsoft.Azure.Management.Dns.DnsManagementClientExtensions
  id: DnsManagementClientExtensions
  parent: Microsoft.Azure.Management.Dns
  children:
  - Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatus(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  - Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatusAsync(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  langs:
  - csharp
  - vb
  name: DnsManagementClientExtensions
  fullName: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions
  type: Class
  source:
    remote:
      path: src/src/ResourceManagement/Dns/DnsManagement/Generated/DnsManagementClientExtensions.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DnsManagementClientExtensions
    path: src/src/ResourceManagement/Dns/DnsManagement/Generated/DnsManagementClientExtensions.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Management.Dns
  namespace: Microsoft.Azure.Management.Dns
  summary: "\r\nClient for managing DNS zones and record.\r\n"
  example: []
  syntax:
    content: public class DnsManagementClientExtensions
    content.vb: Public Class DnsManagementClientExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatus(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  commentId: M:Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatus(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  id: GetLongRunningOperationStatus(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  parent: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions
  langs:
  - csharp
  - vb
  name: GetLongRunningOperationStatus(IDnsManagementClient, String)
  fullName: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatus(Microsoft.Azure.Management.Dns.IDnsManagementClient, System.String)
  type: Method
  source:
    remote:
      path: src/src/ResourceManagement/Dns/DnsManagement/Generated/DnsManagementClientExtensions.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetLongRunningOperationStatus
    path: src/src/ResourceManagement/Dns/DnsManagement/Generated/DnsManagementClientExtensions.cs
    startLine: 51
  assemblies:
  - Microsoft.Azure.Management.Dns
  namespace: Microsoft.Azure.Management.Dns
  summary: "\r\nThe Get Operation Status operation returns the status of the\r\nspecified operation. After calling an asynchronous operation, you\r\ncan call Get Operation Status to determine whether the operation\r\nhas succeeded, failed, or is still in progress.\r\n"
  example: []
  syntax:
    content: public static ZoneDeleteResponse GetLongRunningOperationStatus(IDnsManagementClient operations, string azureAsyncOperation)
    content.vb: Public Shared Function GetLongRunningOperationStatus(operations As IDnsManagementClient, azureAsyncOperation As String) As ZoneDeleteResponse
    parameters:
    - id: operations
      type: Microsoft.Azure.Management.Dns.IDnsManagementClient
      description: "\r\nReference to the\r\nMicrosoft.Azure.Management.Dns.IDnsManagementClient.\r\n"
    - id: azureAsyncOperation
      type: System.String
      description: "\r\nRequired. Location value returned by the Begin operation.\r\n"
    return:
      type: Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse
      description: "\r\nThe response to a Zone Delete operation.\r\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatusAsync(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  commentId: M:Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatusAsync(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  id: GetLongRunningOperationStatusAsync(Microsoft.Azure.Management.Dns.IDnsManagementClient,System.String)
  parent: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions
  langs:
  - csharp
  - vb
  name: GetLongRunningOperationStatusAsync(IDnsManagementClient, String)
  fullName: Microsoft.Azure.Management.Dns.DnsManagementClientExtensions.GetLongRunningOperationStatusAsync(Microsoft.Azure.Management.Dns.IDnsManagementClient, System.String)
  type: Method
  source:
    remote:
      path: src/src/ResourceManagement/Dns/DnsManagement/Generated/DnsManagementClientExtensions.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetLongRunningOperationStatusAsync
    path: src/src/ResourceManagement/Dns/DnsManagement/Generated/DnsManagementClientExtensions.cs
    startLine: 76
  assemblies:
  - Microsoft.Azure.Management.Dns
  namespace: Microsoft.Azure.Management.Dns
  summary: "\r\nThe Get Operation Status operation returns the status of the\r\nspecified operation. After calling an asynchronous operation, you\r\ncan call Get Operation Status to determine whether the operation\r\nhas succeeded, failed, or is still in progress.\r\n"
  example: []
  syntax:
    content: public static Task<ZoneDeleteResponse> GetLongRunningOperationStatusAsync(IDnsManagementClient operations, string azureAsyncOperation)
    content.vb: Public Shared Function GetLongRunningOperationStatusAsync(operations As IDnsManagementClient, azureAsyncOperation As String) As Task(Of ZoneDeleteResponse)
    parameters:
    - id: operations
      type: Microsoft.Azure.Management.Dns.IDnsManagementClient
      description: "\r\nReference to the\r\nMicrosoft.Azure.Management.Dns.IDnsManagementClient.\r\n"
    - id: azureAsyncOperation
      type: System.String
      description: "\r\nRequired. Location value returned by the Begin operation.\r\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse}
      description: "\r\nThe response to a Zone Delete operation.\r\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Azure.Management.Dns
  isExternal: false
  name: Microsoft.Azure.Management.Dns
  fullName: Microsoft.Azure.Management.Dns
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Azure.Management.Dns.IDnsManagementClient
  parent: Microsoft.Azure.Management.Dns
  isExternal: false
  name: IDnsManagementClient
  fullName: Microsoft.Azure.Management.Dns.IDnsManagementClient
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse
  parent: Microsoft.Azure.Management.Dns.Models
  isExternal: false
  name: ZoneDeleteResponse
  fullName: Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse
- uid: Microsoft.Azure.Management.Dns.Models
  isExternal: false
  name: Microsoft.Azure.Management.Dns.Models
  fullName: Microsoft.Azure.Management.Dns.Models
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ZoneDeleteResponse>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse>
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse)
  name.vb: Task(Of ZoneDeleteResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse
    name: ZoneDeleteResponse
    fullName: Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse
    name: ZoneDeleteResponse
    fullName: Microsoft.Azure.Management.Dns.Models.ZoneDeleteResponse
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
