items:
- uid: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames
  commentId: T:Microsoft.Azure.Management.WebSites.Models.SlotConfigNames
  id: SlotConfigNames
  parent: Microsoft.Azure.Management.WebSites.Models
  children:
  - Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.#ctor
  - Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.AppSettingNames
  - Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.ConnectionStringNames
  langs:
  - csharp
  - vb
  name: SlotConfigNames
  fullName: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames
  type: Class
  source:
    remote:
      path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SlotConfigNames
    path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
    startLine: 31
  assemblies:
  - Microsoft.Azure.Management.WebSites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\r\nThe slot specific config names.\r\n"
  example: []
  syntax:
    content: public class SlotConfigNames
    content.vb: Public Class SlotConfigNames
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.AppSettingNames
  commentId: P:Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.AppSettingNames
  id: AppSettingNames
  parent: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames
  langs:
  - csharp
  - vb
  name: AppSettingNames
  fullName: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.AppSettingNames
  type: Property
  source:
    remote:
      path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: AppSettingNames
    path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
    startLine: 42
  assemblies:
  - Microsoft.Azure.Management.WebSites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\r\nOptional. One or more string elements that list the name of the app\r\nsetting that will not be moved durig site swap. For example, if\r\nslot named staging has setting EnableVerboseLogging=1, it\r\nshouldn't be moved when swapped with production slot but should\r\ntake the current value from production.\r\n"
  example: []
  syntax:
    content: >-
      public IList<string> AppSettingNames

      {

          get;

          set;

      }
    content.vb: Public Property AppSettingNames As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.ConnectionStringNames
  commentId: P:Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.ConnectionStringNames
  id: ConnectionStringNames
  parent: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames
  langs:
  - csharp
  - vb
  name: ConnectionStringNames
  fullName: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.ConnectionStringNames
  type: Property
  source:
    remote:
      path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ConnectionStringNames
    path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
    startLine: 58
  assemblies:
  - Microsoft.Azure.Management.WebSites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\r\nOptional. One or more string elements that list the name of the\r\nconnection string setting that will not be moved durig site swap.\r\nFor example, if slot named staging has connection UsersDatabase\r\nthat points to staging test database, it shouldn't be moved when\r\nswapped with production slot but should take the current value\r\nfrom production.\r\n"
  example: []
  syntax:
    content: >-
      public IList<string> ConnectionStringNames

      {

          get;

          set;

      }
    content.vb: Public Property ConnectionStringNames As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.#ctor
  commentId: M:Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames
  langs:
  - csharp
  - vb
  name: SlotConfigNames()
  fullName: Microsoft.Azure.Management.WebSites.Models.SlotConfigNames.SlotConfigNames()
  type: Constructor
  source:
    remote:
      path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/src/ResourceManagement/WebSite/WebSiteManagement/Generated/Models/SlotConfigNames.cs
    startLine: 67
  assemblies:
  - Microsoft.Azure.Management.WebSites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\r\nInitializes a new instance of the SlotConfigNames class.\r\n"
  example: []
  syntax:
    content: public SlotConfigNames()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.WebSites.Models
  isExternal: false
  name: Microsoft.Azure.Management.WebSites.Models
  fullName: Microsoft.Azure.Management.WebSites.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
