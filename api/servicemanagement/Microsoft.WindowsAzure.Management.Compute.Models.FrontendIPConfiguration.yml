items:
- uid: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration
  commentId: T:Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration
  id: FrontendIPConfiguration
  parent: Microsoft.WindowsAzure.Management.Compute.Models
  children:
  - Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.#ctor
  - Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.StaticVirtualNetworkIPAddress
  - Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.SubnetName
  - Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.Type
  langs:
  - csharp
  - vb
  name: FrontendIPConfiguration
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration
  type: Class
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: FrontendIPConfiguration
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
    startLine: 30
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nThe configuration for the virtual IP address (VIP) this load balancer\r\nprovides.\r\n"
  example: []
  syntax:
    content: public class FrontendIPConfiguration
    content.vb: Public Class FrontendIPConfiguration
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.StaticVirtualNetworkIPAddress
  commentId: P:Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.StaticVirtualNetworkIPAddress
  id: StaticVirtualNetworkIPAddress
  parent: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration
  langs:
  - csharp
  - vb
  name: StaticVirtualNetworkIPAddress
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.StaticVirtualNetworkIPAddress
  type: Property
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: StaticVirtualNetworkIPAddress
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
    startLine: 43
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nOptional. If the deployment exists inside a virtual network, a\r\nspecific address from the load balancer subnet can be specified.\r\nThe VIP for the load balancer will then be this specific IP\r\naddress. If a static virtual network IP address is provided, the\r\nSubnetName element of the load balancer must be specified as well.\r\nIf the deployment exists outside of a virtual network, no static\r\nvirtual network IP address can be specified.\r\n"
  example: []
  syntax:
    content: >-
      public string StaticVirtualNetworkIPAddress

      {

          get;

          set;

      }
    content.vb: Public Property StaticVirtualNetworkIPAddress As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.SubnetName
  commentId: P:Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.SubnetName
  id: SubnetName
  parent: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration
  langs:
  - csharp
  - vb
  name: SubnetName
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.SubnetName
  type: Property
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SubnetName
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
    startLine: 59
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nOptional. If the deployment exists inside a virtual network, a\r\nsubnet of that virtual network must be specified for the load\r\nbalancer. The VIP managed by the load balancer will then be an IP\r\naddress out of this subnet. If the deployment exists outside of a\r\nvirtual network, no subnet can be specified and the private VIP\r\nwill be an IP address from the general private address pool.\r\n"
  example: []
  syntax:
    content: >-
      public string SubnetName

      {

          get;

          set;

      }
    content.vb: Public Property SubnetName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.Type
  commentId: P:Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.Type
  id: Type
  parent: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration
  langs:
  - csharp
  - vb
  name: Type
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.Type
  type: Property
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Type
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
    startLine: 72
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nOptional. The type of the VIP provided by this load balancer.\r\nCurrently, only 'Private' is supported. This will create load\r\nbalancing services on a private VIP.\r\n"
  example: []
  syntax:
    content: >-
      public string Type

      {

          get;

          set;

      }
    content.vb: Public Property Type As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.#ctor
  commentId: M:Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration
  langs:
  - csharp
  - vb
  name: FrontendIPConfiguration()
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.FrontendIPConfiguration.FrontendIPConfiguration()
  type: Constructor
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/FrontendIPConfiguration.cs
    startLine: 81
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nInitializes a new instance of the FrontendIPConfiguration class.\r\n"
  example: []
  syntax:
    content: public FrontendIPConfiguration()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Management.Compute.Models
  isExternal: false
  name: Microsoft.WindowsAzure.Management.Compute.Models
  fullName: Microsoft.WindowsAzure.Management.Compute.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
