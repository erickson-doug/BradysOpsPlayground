items:
- uid: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  commentId: T:Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  id: OperatingSystemListFamiliesResponse.OperatingSystem
  parent: Microsoft.WindowsAzure.Management.Compute.Models
  children:
  - Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.#ctor
  - Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsActive
  - Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsDefault
  - Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Label
  - Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Version
  langs:
  - csharp
  - vb
  name: OperatingSystemListFamiliesResponse.OperatingSystem
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  type: Class
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: OperatingSystem
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
    startLine: 75
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nAn operating system that is valid for your subscription.\r\n"
  example: []
  syntax:
    content: public class OperatingSystem
    content.vb: Public Class OperatingSystem
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsActive
  commentId: P:Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsActive
  id: IsActive
  parent: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  langs:
  - csharp
  - vb
  name: IsActive
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsActive
  type: Property
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: IsActive
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
    startLine: 95
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nOptional. Indicates whether this operating system version is\r\ncurrently active for running a service. If an operating system\r\nversion is active, you can manually configure your service to\r\nrun on that version. An operating system version may be\r\ninactive for one of two reasons: 1. It is not yet active as it\r\nis in the process of being rolled out to Azure data centers.\r\nIf your service is configured to use auto-upgrade, it will be\r\nupgraded to the new operating system version during the\r\nrollout. If you are manually configuring your operating system\r\nversion, you can upgrade to the latest version once it becomes\r\nactive. 2. It is no longer supported for running a service. In\r\nthis case you will either need to manually configure your\r\nservice to run on a newer version, or configure your service\r\nto use auto-upgrade to manage operating system upgrades.\r\n"
  example: []
  syntax:
    content: >-
      public bool IsActive

      {

          get;

          set;

      }
    content.vb: Public Property IsActive As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsDefault
  commentId: P:Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsDefault
  id: IsDefault
  parent: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  langs:
  - csharp
  - vb
  name: IsDefault
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.IsDefault
  type: Property
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: IsDefault
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
    startLine: 113
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nOptional. Indicates whether this operating system version is\r\nthe default version for a service that has not otherwise\r\nspecified a particular version. The default operating system\r\nversion is applied to services that are configured for\r\nauto-upgrade. An operating system family has exactly one\r\ndefault operating system version at any given time, for which\r\nthe IsDefault element is set to true; for all other versions,\r\nIsDefault is set to false.\r\n"
  example: []
  syntax:
    content: >-
      public bool IsDefault

      {

          get;

          set;

      }
    content.vb: Public Property IsDefault As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Label
  commentId: P:Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Label
  id: Label
  parent: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  langs:
  - csharp
  - vb
  name: Label
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Label
  type: Property
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Label
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
    startLine: 124
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nOptional. The label of the operating system version.\r\n"
  example: []
  syntax:
    content: >-
      public string Label

      {

          get;

          set;

      }
    content.vb: Public Property Label As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Version
  commentId: P:Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Version
  id: Version
  parent: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  langs:
  - csharp
  - vb
  name: Version
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.Version
  type: Property
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Version
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
    startLine: 139
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nOptional. The operating system version. This value corresponds\r\nto the configuration value for specifying that your service is\r\nto run on a particular version of the Azure guest operating\r\nsystem. See Configuring Settings for the Windows Azure Guest\r\nOS for additional details.\r\n"
  example: []
  syntax:
    content: >-
      public string Version

      {

          get;

          set;

      }
    content.vb: Public Property Version As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.#ctor
  commentId: M:Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem
  langs:
  - csharp
  - vb
  name: OperatingSystem()
  fullName: Microsoft.WindowsAzure.Management.Compute.Models.OperatingSystemListFamiliesResponse.OperatingSystem.OperatingSystem()
  type: Constructor
  source:
    remote:
      path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/src/ServiceManagement/Compute/ComputeManagement/Generated/Models/OperatingSystemListFamiliesResponse.cs
    startLine: 148
  assemblies:
  - Microsoft.WindowsAzure.Management.Compute
  namespace: Microsoft.WindowsAzure.Management.Compute.Models
  summary: "\r\nInitializes a new instance of the OperatingSystem class.\r\n"
  example: []
  syntax:
    content: public OperatingSystem()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Management.Compute.Models
  isExternal: false
  name: Microsoft.WindowsAzure.Management.Compute.Models
  fullName: Microsoft.WindowsAzure.Management.Compute.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
