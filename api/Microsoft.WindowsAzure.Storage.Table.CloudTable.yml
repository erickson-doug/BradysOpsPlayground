items:
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable
  commentId: T:Microsoft.WindowsAzure.Storage.Table.CloudTable
  id: CloudTable
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(Microsoft.WindowsAzure.Storage.StorageUri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(System.Uri)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(System.Uri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.AsyncCallback,System.Object)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.Create(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateQuery``1
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.Delete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreate(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreateIfNotExists(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDelete(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDeleteIfExists(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecute(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteBatch(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented``1(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented``2(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExists(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndGetPermissions(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.EndSetPermissions(System.IAsyncResult)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.Execute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.Exists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String,System.Nullable{Microsoft.WindowsAzure.Storage.SharedAccessProtocol},Microsoft.WindowsAzure.Storage.IPAddressOrRange)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.Name
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ServiceClient
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.StorageUri
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.ToString
  - Microsoft.WindowsAzure.Storage.Table.CloudTable.Uri
  langs:
  - csharp
  - vb
  name: CloudTable
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable
  type: Class
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CloudTable
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 32
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nRepresents a Microsoft Azure table.\r\n"
  example: []
  syntax:
    content: public class CloudTable
    content.vb: Public Class CloudTable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.Execute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.Execute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: Execute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: Execute(TableOperation, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.Execute(Microsoft.WindowsAzure.Storage.Table.TableOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Execute
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 47
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes an operation on a table.  \r\n"
  example: []
  syntax:
    content: public virtual TableResult Execute(TableOperation operation, TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function Execute(operation As TableOperation, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As TableResult
    parameters:
    - id: operation
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object that represents the operation to perform.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableResult
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.AsyncCallback,System.Object)
  id: BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecute(TableOperation, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecute
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 63
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins execution of an asynchronous table operation.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecute(TableOperation operation, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecute(operation As TableOperation, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: operation
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object that represents the operation to perform.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecute(TableOperation, TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecute(Microsoft.WindowsAzure.Storage.Table.TableOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecute
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 79
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins execution of an asynchronous table operation.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecute(TableOperation operation, TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecute(operation As TableOperation, requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: operation
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object that represents the operation to perform.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecute(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecute(System.IAsyncResult)
  id: EndExecute(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndExecute(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecute(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndExecute
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 92
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds execution of an asynchronous table operation.\r\n"
  example: []
  syntax:
    content: public virtual TableResult EndExecute(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndExecute(asyncResult As IAsyncResult) As TableResult
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableResult
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> containing the result executing the operation on the table.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  id: ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteAsync(TableOperation)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 103
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation that executes an asynchronous table operation.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableResult> ExecuteAsync(TableOperation operation)
    content.vb: Public Overridable Function ExecuteAsync(operation As TableOperation) As Task(Of TableResult)
    parameters:
    - id: operation
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object that represents the operation to perform.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableResult}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.Threading.CancellationToken)
  id: ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteAsync(TableOperation, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 115
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation that executes an asynchronous table operation.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableResult> ExecuteAsync(TableOperation operation, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteAsync(operation As TableOperation, cancellationToken As CancellationToken) As Task(Of TableResult)
    parameters:
    - id: operation
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object that represents the operation to perform.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableResult}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteAsync(TableOperation, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 128
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation that executes an asynchronous table operation.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableResult> ExecuteAsync(TableOperation operation, TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function ExecuteAsync(operation As TableOperation, requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of TableResult)
    parameters:
    - id: operation
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object that represents the operation to perform.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableResult}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteAsync(TableOperation, TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 142
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation that executes an asynchronous table operation.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableResult> ExecuteAsync(TableOperation operation, TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteAsync(operation As TableOperation, requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of TableResult)
    parameters:
    - id: operation
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> object that represents the operation to perform.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableResult}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteBatch(TableBatchOperation, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteBatch
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 160
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a batch operation on a table as an atomic operation.\r\n"
  example: []
  syntax:
    content: public virtual IList<TableResult> ExecuteBatch(TableBatchOperation batch, TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function ExecuteBatch(batch As TableBatchOperation, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IList(Of TableResult)
    parameters:
    - id: batch
      type: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> object representing the operations to execute on the table.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}
      description: An enumerable collection of <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> objects that contains the results, in order, of each operation in the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> on the table.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.AsyncCallback,System.Object)
  id: BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteBatch(TableBatchOperation, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteBatch
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 175
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to execute a batch of operations on a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecuteBatch(TableBatchOperation batch, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecuteBatch(batch As TableBatchOperation, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: batch
      type: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> object representing the operations to execute on the table.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteBatch(TableBatchOperation, TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteBatch
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 191
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to execute a batch of operations on a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecuteBatch(TableBatchOperation batch, TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecuteBatch(batch As TableBatchOperation, requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: batch
      type: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> object representing the operations to execute on the table.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteBatch(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteBatch(System.IAsyncResult)
  id: EndExecuteBatch(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndExecuteBatch(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndExecuteBatch
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 204
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to execute a batch of operations on a table.\r\n"
  example: []
  syntax:
    content: public virtual IList<TableResult> EndExecuteBatch(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndExecuteBatch(asyncResult As IAsyncResult) As IList(Of TableResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    return:
      type: System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}
      description: A enumerable collection of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that contains the results, in order, of each operation in the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> on the table.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)
  id: ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteBatchAsync(TableBatchOperation)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteBatchAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 215
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a batch of operations on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<IList<TableResult>> ExecuteBatchAsync(TableBatchOperation batch)
    content.vb: Public Overridable Function ExecuteBatchAsync(batch As TableBatchOperation) As Task(Of IList(Of TableResult))
    parameters:
    - id: batch
      type: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> object representing the operations to execute on the table.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that is list of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.Threading.CancellationToken)
  id: ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteBatchAsync(TableBatchOperation, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteBatchAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 227
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a batch of operations on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<IList<TableResult>> ExecuteBatchAsync(TableBatchOperation batch, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteBatchAsync(batch As TableBatchOperation, cancellationToken As CancellationToken) As Task(Of IList(Of TableResult))
    parameters:
    - id: batch
      type: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> object representing the operations to execute on the table.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that is list of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteBatchAsync(TableBatchOperation, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteBatchAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 240
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a batch of operations on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<IList<TableResult>> ExecuteBatchAsync(TableBatchOperation batch, TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function ExecuteBatchAsync(batch As TableBatchOperation, requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of IList(Of TableResult))
    parameters:
    - id: batch
      type: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> object representing the operations to execute on the table.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that is list of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteBatchAsync(TableBatchOperation, TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteBatchAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 254
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a batch of operations on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<IList<TableResult>> ExecuteBatchAsync(TableBatchOperation batch, TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteBatchAsync(batch As TableBatchOperation, requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of IList(Of TableResult))
    parameters:
    - id: batch
      type: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> object representing the operations to execute on the table.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that is list of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableResult" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuery(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuery(TableQuery, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuery
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 273
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a query on a table and returns an enumerable collection of <xref href=\"Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\"></xref> objects.\r\n"
  example: []
  syntax:
    content: public virtual IEnumerable<DynamicTableEntity> ExecuteQuery(TableQuery query, TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function ExecuteQuery(query As TableQuery, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IEnumerable(Of DynamicTableEntity)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}
      description: An enumerable collection of <xref href="Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" data-throw-if-not-resolved="false"></xref> objects, representing table entities returned by the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmented(TableQuery, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 288
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a segmented query on a table and returns a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1\" data-throw-if-not-resolved=\"false\"></xref> containing <xref href=\"Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\"></xref> objects.\r\n"
  example: []
  syntax:
    content: public virtual TableQuerySegment<DynamicTableEntity> ExecuteQuerySegmented(TableQuery query, TableContinuationToken token, TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function ExecuteQuerySegmented(query As TableQuery, token As TableContinuationToken, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As TableQuerySegment(Of DynamicTableEntity)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" data-throw-if-not-resolved="false"></xref> containing the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented(TableQuery, TableContinuationToken, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 304
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous segmented query on a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecuteQuerySegmented(TableQuery query, TableContinuationToken token, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(query As TableQuery, token As TableContinuationToken, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented(TableQuery, TableContinuationToken, TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 321
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous segmented query on a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecuteQuerySegmented(TableQuery query, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(query As TableQuery, token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented(System.IAsyncResult)
  id: EndExecuteQuerySegmented(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndExecuteQuerySegmented(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 333
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous segmented query on a table. \r\n"
  example: []
  syntax:
    content: public virtual TableQuerySegment<DynamicTableEntity> EndExecuteQuerySegmented(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndExecuteQuerySegmented(asyncResult As IAsyncResult) As TableQuerySegment(Of DynamicTableEntity)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" data-throw-if-not-resolved="false"></xref> containing the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  id: ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync(TableQuery, TableContinuationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 345
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to perform a segmented query on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<DynamicTableEntity>> ExecuteQuerySegmentedAsync(TableQuery query, TableContinuationToken token)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(query As TableQuery, token As TableContinuationToken) As Task(Of TableQuerySegment(Of DynamicTableEntity))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync(TableQuery, TableContinuationToken, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 358
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to perform a segmented query on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<DynamicTableEntity>> ExecuteQuerySegmentedAsync(TableQuery query, TableContinuationToken token, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(query As TableQuery, token As TableContinuationToken, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of DynamicTableEntity))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync(TableQuery, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 372
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to perform a segmented query on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<DynamicTableEntity>> ExecuteQuerySegmentedAsync(TableQuery query, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(query As TableQuery, token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of TableQuerySegment(Of DynamicTableEntity))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync(TableQuery, TableContinuationToken, TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 387
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to perform a segmented query on a table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<DynamicTableEntity>> ExecuteQuerySegmentedAsync(TableQuery query, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(query As TableQuery, token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of DynamicTableEntity))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuery<TResult>(TableQuery, EntityResolver<TResult>, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuery
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 404
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a query on a table and applies the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual IEnumerable<TResult> ExecuteQuery<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function ExecuteQuery(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IEnumerable(Of TResult)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An enumerable collection, containing the projection into type <code>TResult</code>, of the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuery(Of TResult)(TableQuery, EntityResolver(Of TResult), TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmented<TResult>(TableQuery, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 421
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a segmented query on a table and applies the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual TableQuerySegment<TResult> ExecuteQuerySegmented<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function ExecuteQuerySegmented(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As TableQuerySegment(Of TResult)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TResult
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> object containing the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuerySegmented(Of TResult)(TableQuery, EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented<TResult>(TableQuery, EntityResolver<TResult>, TableContinuationToken, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 438
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to execute a segmented query and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecuteQuerySegmented<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableContinuationToken token, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), token As TableContinuationToken, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> representing the query to execute.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    typeParameters:
    - id: TResult
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.AsyncCallback, System.Object)
  name.vb: BeginExecuteQuerySegmented(Of TResult)(TableQuery, EntityResolver(Of TResult), TableContinuationToken, AsyncCallback, Object)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented<TResult>(TableQuery, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 456
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to execute a segmented query and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExecuteQuerySegmented<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    typeParameters:
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  name.vb: BeginExecuteQuerySegmented(Of TResult)(TableQuery, EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext, AsyncCallback, Object)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TResult>(TableQuery, EntityResolver<TResult>, TableContinuationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 473
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a segmented query and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableContinuationToken token)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), token As TableContinuationToken) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    typeParameters:
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TResult)(TableQuery, EntityResolver(Of TResult), TableContinuationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TResult>(TableQuery, EntityResolver<TResult>, TableContinuationToken, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 488
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a segmented query and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableContinuationToken token, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), token As TableContinuationToken, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    typeParameters:
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.Threading.CancellationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TResult)(TableQuery, EntityResolver(Of TResult), TableContinuationToken, CancellationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TResult>(TableQuery, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 504
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a segmented query and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuerySegmentedAsync(Of TResult)(TableQuery, EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TResult>(TableQuery, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 521
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a segmented query and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TResult>(TableQuery query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TResult)(query As TableQuery, resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    typeParameters:
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TResult)(TableQuery, EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext, CancellationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateQuery``1
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateQuery``1
  id: CreateQuery``1
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateQuery<TElement>()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateQuery<TElement>()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateQuery
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 543
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nA factory method that creates a query that can be modified using LINQ. The query may be subsequently executed using one of the execution methods available for <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable\" data-throw-if-not-resolved=\"false\"></xref>, \r\nsuch as <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)\" data-throw-if-not-resolved=\"false\"></xref>.\r\n"
  remarks: "\r\nThe <xref href=\"Microsoft.WindowsAzure.Storage.Table.Queryable\" data-throw-if-not-resolved=\"false\"></xref> namespace includes extension methods for the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableQuery\" data-throw-if-not-resolved=\"false\"></xref> object, \r\nincluding <xref href=\"WithOptions\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"WithContext\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"AsTableQuery\" data-throw-if-not-resolved=\"false\"></xref>. To use these methods, include a <code>using</code>\r\nstatement that references the <xref href=\"Microsoft.WindowsAzure.Storage.Table.Queryable\" data-throw-if-not-resolved=\"false\"></xref> namespace.\r\n"
  example: []
  syntax:
    content: 'public virtual TableQuery<TElement> CreateQuery<TElement>()where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function CreateQuery(Of TElement As {ITableEntity, New}) As TableQuery(Of TElement)
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> object, specialized for type <code>TElement</code>, that may subsequently be executed.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateQuery(Of TElement)()
  name.vb: CreateQuery(Of TElement)()
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuery``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuery<TElement>(TableQuery<TElement>, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuery
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 557
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a query on a table.\r\n"
  example: []
  syntax:
    content: 'public virtual IEnumerable<TElement> ExecuteQuery<TElement>(TableQuery<TElement> query, TableRequestOptions requestOptions = null, OperationContext operationContext = null)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuery(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IEnumerable(Of TElement)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A TableQuery instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: An enumerable collection, specialized for type <code>TElement</code>, of the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuery(Of TElement)(TableQuery(Of TElement), TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmented<TElement>(TableQuery<TElement>, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 580
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a query on a table in segmented mode.\r\n"
  example: []
  syntax:
    content: 'public virtual TableQuerySegment<TElement> ExecuteQuerySegmented<TElement>(TableQuery<TElement> query, TableContinuationToken token, TableRequestOptions requestOptions = null, OperationContext operationContext = null)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmented(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), token As TableContinuationToken, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As TableQuerySegment(Of TElement)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref>, specialized for type <code>TElement</code>, containing the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuerySegmented(Of TElement)(TableQuery(Of TElement), TableContinuationToken, TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented<TElement>(TableQuery<TElement>, TableContinuationToken, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 604
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to query a table in segmented mode.\r\n"
  example: []
  syntax:
    content: 'public virtual ICancellableAsyncResult BeginExecuteQuerySegmented<TElement>(TableQuery<TElement> query, TableContinuationToken token, AsyncCallback callback, object state)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), token As TableContinuationToken, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.AsyncCallback, System.Object)
  name.vb: BeginExecuteQuerySegmented(Of TElement)(TableQuery(Of TElement), TableContinuationToken, AsyncCallback, Object)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented<TElement>(TableQuery<TElement>, TableContinuationToken, TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 622
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to query a table in segmented mode.\r\n"
  example: []
  syntax:
    content: 'public virtual ICancellableAsyncResult BeginExecuteQuerySegmented<TElement>(TableQuery<TElement> query, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  name.vb: BeginExecuteQuerySegmented(Of TElement)(TableQuery(Of TElement), TableContinuationToken, TableRequestOptions, OperationContext, AsyncCallback, Object)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented``1(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented``1(System.IAsyncResult)
  id: EndExecuteQuerySegmented``1(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndExecuteQuerySegmented<TResult>(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented<TResult>(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 642
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to query a table in segmented mode.\r\n"
  example: []
  syntax:
    content: public virtual TableQuerySegment<TResult> EndExecuteQuerySegmented<TResult>(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndExecuteQuerySegmented(Of TResult)(asyncResult As IAsyncResult) As TableQuerySegment(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    typeParameters:
    - id: TResult
      description: The type of the results to be returned. Can be the entity type specified in the Begin or the result type of the resolver
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> containing the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented(Of TResult)(System.IAsyncResult)
  name.vb: EndExecuteQuerySegmented(Of TResult)(IAsyncResult)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement>, TableContinuationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 655
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to query a table in segmented mode.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TElement>> ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement> query, TableContinuationToken token)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), token As TableContinuationToken) As Task(Of TableQuerySegment(Of TElement))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TElement}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement)(TableQuery(Of TElement), TableContinuationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement>, TableContinuationToken, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 669
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to query a table in segmented mode.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TElement>> ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement> query, TableContinuationToken token, CancellationToken cancellationToken)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), token As TableContinuationToken, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of TElement))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TElement}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.Threading.CancellationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement)(TableQuery(Of TElement), TableContinuationToken, CancellationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement>, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 684
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to query a table in segmented mode.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TElement>> ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement> query, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of TableQuerySegment(Of TElement))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TElement}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement)(TableQuery(Of TElement), TableContinuationToken, TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement>, TableContinuationToken, TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 700
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to query a table in segmented mode.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TElement>> ExecuteQuerySegmentedAsync<TElement>(TableQuery<TElement> query, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New})(query As TableQuery(Of TElement), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of TElement))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TElement}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement)(TableQuery(Of TElement), TableContinuationToken, TableRequestOptions, OperationContext, CancellationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuery``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuery<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuery
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 721
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a query and applies the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the result.\r\n"
  example: []
  syntax:
    content: 'public virtual IEnumerable<TResult> ExecuteQuery<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableRequestOptions requestOptions = null, OperationContext operationContext = null)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuery(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IEnumerable(Of TResult)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An enumerable collection, containing the projection into type <code>TResult</code>, of the results of executing the query.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuery(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmented<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 747
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nExecutes a query in segmented mode and applies the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the results.\r\n"
  example: []
  syntax:
    content: 'public virtual TableQuerySegment<TResult> ExecuteQuerySegmented<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions = null, OperationContext operationContext = null)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmented(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As TableQuerySegment(Of TResult)
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}
      description: 'A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> containing the projection into type <code>TResult</code> of the results of executing the query. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuerySegmented(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableContinuationToken, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 774
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to query a table in segmented mode and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the results.\r\n"
  example: []
  syntax:
    content: 'public virtual ICancellableAsyncResult BeginExecuteQuerySegmented<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableContinuationToken token, AsyncCallback callback, object state)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), token As TableContinuationToken, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.AsyncCallback, System.Object)
  name.vb: BeginExecuteQuerySegmented(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableContinuationToken, AsyncCallback, Object)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginExecuteQuerySegmented``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExecuteQuerySegmented<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 793
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to execute a query in segmented mode and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the results.\r\n"
  example: []
  syntax:
    content: 'public virtual ICancellableAsyncResult BeginExecuteQuerySegmented<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function BeginExecuteQuerySegmented(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExecuteQuerySegmented(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  name.vb: BeginExecuteQuerySegmented(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext, AsyncCallback, Object)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented``2(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented``2(System.IAsyncResult)
  id: EndExecuteQuerySegmented``2(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndExecuteQuerySegmented<TElement, TResult>(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented<TElement, TResult>(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndExecuteQuerySegmented
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 815
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to execute a query in segmented mode.\r\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = "Reveiewed.")]

      public virtual TableQuerySegment<TResult> EndExecuteQuerySegmented<TElement, TResult>(IAsyncResult asyncResult)where TElement : ITableEntity, new ()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification:="Reveiewed.")>

      Public Overridable Function EndExecuteQuerySegmented(Of TElement As {ITableEntity, New}, TResult)(asyncResult As IAsyncResult) As TableQuerySegment(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}
      description: 'A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" data-throw-if-not-resolved="false"></xref> containing the projection into type <code>TResult</code> of the results of executing the query. '
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1004:GenericMethodsShouldProvideTypeParameter
    namedArguments:
    - name: Justification
      type: System.String
      value: Reveiewed.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExecuteQuerySegmented(Of TElement, TResult)(System.IAsyncResult)
  name.vb: EndExecuteQuerySegmented(Of TElement, TResult)(IAsyncResult)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  id: ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableContinuationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 831
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a query in segmented mode and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the results.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableContinuationToken token)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), token As TableContinuationToken) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableContinuationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableContinuationToken, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 847
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a query in segmented mode and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the results.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableContinuationToken token, CancellationToken cancellationToken)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), token As TableContinuationToken, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, System.Threading.CancellationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableContinuationToken, CancellationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 864
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a query in segmented mode and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the results.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement>, EntityResolver<TResult>, TableContinuationToken, TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync<TElement, TResult>(Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExecuteQuerySegmentedAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 882
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to execute a query in segmented mode and apply the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.EntityResolver`1\" data-throw-if-not-resolved=\"false\"></xref> to the results.\r\n"
  example: []
  syntax:
    content: 'public virtual Task<TableQuerySegment<TResult>> ExecuteQuerySegmentedAsync<TElement, TResult>(TableQuery<TElement> query, EntityResolver<TResult> resolver, TableContinuationToken token, TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)where TElement : ITableEntity, new ()'
    content.vb: Public Overridable Function ExecuteQuerySegmentedAsync(Of TElement As {ITableEntity, New}, TResult)(query As TableQuery(Of TElement), resolver As EntityResolver(Of TResult), token As TableContinuationToken, requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of TableQuerySegment(Of TResult))
    parameters:
    - id: query
      type: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableQuery" data-throw-if-not-resolved="false"></xref> instance specifying the table to query and the query parameters to use, specialized for a type <code>TElement</code>.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: An <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> instance which creates a projection of the table query result entities into the specified type <code>TResult</code>.
    - id: token
      type: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" data-throw-if-not-resolved="false"></xref> object representing a continuation token from the server when the operation returns a partial result.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    typeParameters:
    - id: TElement
      description: The entity type of the query.
    - id: TResult
      description: The type into which the <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver`1" data-throw-if-not-resolved="false"></xref> will project the query results.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Of TElement, TResult)(Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement), Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), Microsoft.WindowsAzure.Storage.Table.TableContinuationToken, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  name.vb: ExecuteQuerySegmentedAsync(Of TElement, TResult)(TableQuery(Of TElement), EntityResolver(Of TResult), TableContinuationToken, TableRequestOptions, OperationContext, CancellationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.Create(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.Create(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: Create(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: Create(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.Create(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Create
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 900
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nCreates a table.\r\n"
  example: []
  syntax:
    content: public virtual void Create(TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Sub Create(requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(System.AsyncCallback,System.Object)
  id: BeginCreate(System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginCreate(AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginCreate
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 921
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to create a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginCreate(AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginCreate(callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginCreate(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginCreate(TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreate(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginCreate
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 935
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to create a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginCreate(TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginCreate(requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreate(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreate(System.IAsyncResult)
  id: EndCreate(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndCreate(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndCreate
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 954
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to create a table.\r\n"
  example: []
  syntax:
    content: public virtual void EndCreate(IAsyncResult asyncResult)
    content.vb: Public Overridable Sub EndCreate(asyncResult As IAsyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync
  id: CreateAsync
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateAsync()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 964
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table.\r\n"
  example: []
  syntax:
    content: public virtual Task CreateAsync()
    content.vb: Public Overridable Function CreateAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(System.Threading.CancellationToken)
  id: CreateAsync(System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateAsync(CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 975
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table.\r\n"
  example: []
  syntax:
    content: public virtual Task CreateAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function CreateAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateAsync(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 987
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table.\r\n"
  example: []
  syntax:
    content: public virtual Task CreateAsync(TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function CreateAsync(requestOptions As TableRequestOptions, operationContext As OperationContext) As Task
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateAsync(TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1000
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table.\r\n"
  example: []
  syntax:
    content: public virtual Task CreateAsync(TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function CreateAsync(requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: CreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateIfNotExists(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateIfNotExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1018
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nCreates the table if it does not already exist.\r\n"
  remarks: This API performs an existence check and therefore requires list permissions.
  example: []
  syntax:
    content: public virtual bool CreateIfNotExists(TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function CreateIfNotExists(requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Boolean
      description: <code>true</code> if table was created; otherwise, <code>false</code>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(System.AsyncCallback,System.Object)
  id: BeginCreateIfNotExists(System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginCreateIfNotExists(AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginCreateIfNotExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1065
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to create a table if it does not already exist.\r\n"
  remarks: This API performs an existence check and therefore requires list permissions.
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginCreateIfNotExists(AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginCreateIfNotExists(callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginCreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginCreateIfNotExists(TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginCreateIfNotExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginCreateIfNotExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1080
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to create a table if it does not already exist.\r\n"
  remarks: This API performs an existence check and therefore requires list permissions.
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginCreateIfNotExists(TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginCreateIfNotExists(requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreateIfNotExists(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreateIfNotExists(System.IAsyncResult)
  id: EndCreateIfNotExists(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndCreateIfNotExists(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndCreateIfNotExists(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndCreateIfNotExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1178
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to create a table if it does not already exist.\r\n"
  example: []
  syntax:
    content: public virtual bool EndCreateIfNotExists(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndCreateIfNotExists(asyncResult As IAsyncResult) As Boolean
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    return:
      type: System.Boolean
      description: <code>true</code> if table was created; otherwise, <code>false</code>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync
  id: CreateIfNotExistsAsync
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateIfNotExistsAsync()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateIfNotExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1192
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table if it does not already exist.\r\n"
  remarks: This API performs an existence check and therefore requires list permissions.
  example: []
  syntax:
    content: public virtual Task<bool> CreateIfNotExistsAsync()
    content.vb: Public Overridable Function CreateIfNotExistsAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(System.Threading.CancellationToken)
  id: CreateIfNotExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateIfNotExistsAsync(CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateIfNotExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1204
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table if it does not already exist.\r\n"
  remarks: This API performs an existence check and therefore requires list permissions.
  example: []
  syntax:
    content: public virtual Task<bool> CreateIfNotExistsAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function CreateIfNotExistsAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateIfNotExistsAsync(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateIfNotExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1217
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table if it does not already exist.\r\n"
  remarks: This API performs an existence check and therefore requires list permissions.
  example: []
  syntax:
    content: public virtual Task<bool> CreateIfNotExistsAsync(TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function CreateIfNotExistsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of Boolean)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CreateIfNotExistsAsync(TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CreateIfNotExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1231
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to create a table if it does not already exist.\r\n"
  remarks: This API performs an existence check and therefore requires list permissions.
  example: []
  syntax:
    content: public virtual Task<bool> CreateIfNotExistsAsync(TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function CreateIfNotExistsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.Delete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.Delete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: Delete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: Delete(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.Delete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Delete
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1247
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nDeletes a table.\r\n"
  example: []
  syntax:
    content: public virtual void Delete(TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Sub Delete(requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(System.AsyncCallback,System.Object)
  id: BeginDelete(System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginDelete(AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginDelete
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1268
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to delete a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginDelete(AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginDelete(callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginDelete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginDelete(TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDelete(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginDelete
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1282
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to delete a table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginDelete(TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginDelete(requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDelete(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDelete(System.IAsyncResult)
  id: EndDelete(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndDelete(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDelete(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndDelete
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1301
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to delete a table.\r\n"
  example: []
  syntax:
    content: public virtual void EndDelete(IAsyncResult asyncResult)
    content.vb: Public Overridable Sub EndDelete(asyncResult As IAsyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync
  id: DeleteAsync
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteAsync()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1311
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete a table.\r\n"
  example: []
  syntax:
    content: public virtual Task DeleteAsync()
    content.vb: Public Overridable Function DeleteAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(System.Threading.CancellationToken)
  id: DeleteAsync(System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteAsync(CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1322
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete a table.\r\n"
  example: []
  syntax:
    content: public virtual Task DeleteAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function DeleteAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteAsync(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1334
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete a table.\r\n"
  example: []
  syntax:
    content: public virtual Task DeleteAsync(TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function DeleteAsync(requestOptions As TableRequestOptions, operationContext As OperationContext) As Task
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteAsync(TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1347
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete a table.\r\n"
  example: []
  syntax:
    content: public virtual Task DeleteAsync(TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function DeleteAsync(requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: DeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteIfExists(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteIfExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1364
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nDeletes the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual bool DeleteIfExists(TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function DeleteIfExists(requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Boolean
      description: <code>true</code> if the table was deleted; otherwise, <code>false</code>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(System.AsyncCallback,System.Object)
  id: BeginDeleteIfExists(System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginDeleteIfExists(AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginDeleteIfExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1410
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to delete the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginDeleteIfExists(AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginDeleteIfExists(callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginDeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginDeleteIfExists(TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginDeleteIfExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginDeleteIfExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1424
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to delete the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginDeleteIfExists(TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginDeleteIfExists(requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDeleteIfExists(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDeleteIfExists(System.IAsyncResult)
  id: EndDeleteIfExists(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndDeleteIfExists(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndDeleteIfExists(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndDeleteIfExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1521
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to delete the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual bool EndDeleteIfExists(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndDeleteIfExists(asyncResult As IAsyncResult) As Boolean
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    return:
      type: System.Boolean
      description: <code>true</code> if the table was deleted; otherwise, <code>false</code>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync
  id: DeleteIfExistsAsync
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteIfExistsAsync()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteIfExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1534
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> DeleteIfExistsAsync()
    content.vb: Public Overridable Function DeleteIfExistsAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(System.Threading.CancellationToken)
  id: DeleteIfExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteIfExistsAsync(CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteIfExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1545
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> DeleteIfExistsAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function DeleteIfExistsAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteIfExistsAsync(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteIfExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1557
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> DeleteIfExistsAsync(TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function DeleteIfExistsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of Boolean)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: DeleteIfExistsAsync(TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: DeleteIfExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1570
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to delete the table if it exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> DeleteIfExistsAsync(TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function DeleteIfExistsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.Exists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.Exists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: Exists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: Exists(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.Exists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Exists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1586
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nChecks whether the table exists.\r\n"
  example: []
  syntax:
    content: public virtual bool Exists(TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function Exists(requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Boolean
      description: <code>true</code> if table exists; otherwise, <code>false</code>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(System.AsyncCallback,System.Object)
  id: BeginExists(System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExists(AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1624
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to determine whether a table exists.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExists(AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExists(callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginExists(TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginExists(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1638
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous operation to determine whether a table exists.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginExists(TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginExists(requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExists(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExists(System.IAsyncResult)
  id: EndExists(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndExists(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndExists(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndExists
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1673
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nEnds an asynchronous operation to determine whether a table exists.\r\n"
  example: []
  syntax:
    content: public virtual bool EndExists(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndExists(asyncResult As IAsyncResult) As Boolean
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    return:
      type: System.Boolean
      description: <code>true</code> if table exists; otherwise, <code>false</code>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync
  id: ExistsAsync
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExistsAsync()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1686
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to determine whether a table exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> ExistsAsync()
    content.vb: Public Overridable Function ExistsAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(System.Threading.CancellationToken)
  id: ExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExistsAsync(CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1697
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to determine whether a table exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> ExistsAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExistsAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExistsAsync(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1709
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to determine whether a table exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> ExistsAsync(TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function ExistsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of Boolean)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ExistsAsync(TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ExistsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1722
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to determine whether a table exists.\r\n"
  example: []
  syntax:
    content: public virtual Task<bool> ExistsAsync(TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExistsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <code>bool</code> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: GetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetPermissions(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1739
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual TablePermissions GetPermissions(TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Function GetPermissions(requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing) As TablePermissions
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(System.AsyncCallback,System.Object)
  id: BeginGetPermissions(System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginGetPermissions(AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginGetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1755
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous request to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginGetPermissions(AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginGetPermissions(callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginGetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginGetPermissions(TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginGetPermissions(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginGetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1769
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous request to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginGetPermissions(TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginGetPermissions(requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndGetPermissions(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndGetPermissions(System.IAsyncResult)
  id: EndGetPermissions(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndGetPermissions(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndGetPermissions(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndGetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1787
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nReturns the asynchronous result of the request to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual TablePermissions EndGetPermissions(IAsyncResult asyncResult)
    content.vb: Public Overridable Function EndGetPermissions(asyncResult As IAsyncResult) As TablePermissions
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync
  id: GetPermissionsAsync
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetPermissionsAsync()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1797
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TablePermissions> GetPermissionsAsync()
    content.vb: Public Overridable Function GetPermissionsAsync As Task(Of TablePermissions)
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TablePermissions}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(System.Threading.CancellationToken)
  id: GetPermissionsAsync(System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetPermissionsAsync(CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1808
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TablePermissions> GetPermissionsAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function GetPermissionsAsync(cancellationToken As CancellationToken) As Task(Of TablePermissions)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TablePermissions}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetPermissionsAsync(TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1820
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TablePermissions> GetPermissionsAsync(TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function GetPermissionsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext) As Task(Of TablePermissions)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TablePermissions}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetPermissionsAsync(TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1833
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task<TablePermissions> GetPermissionsAsync(TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function GetPermissionsAsync(requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of TablePermissions)
    parameters:
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TablePermissions}
      description: A <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object of type <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: SetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: SetPermissions(TablePermissions, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1873
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nSets the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual void SetPermissions(TablePermissions permissions, TableRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: Public Overridable Sub SetPermissions(permissions As TablePermissions, requestOptions As TableRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: permissions
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object that represents the permissions to set.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.AsyncCallback,System.Object)
  id: BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginSetPermissions(TablePermissions, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginSetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1889
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous request to set permissions for the table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginSetPermissions(TablePermissions permissions, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginSetPermissions(permissions As TablePermissions, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: permissions
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object that represents the permissions to set.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  id: BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.AsyncCallback,System.Object)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: BeginSetPermissions(TablePermissions, TableRequestOptions, OperationContext, AsyncCallback, Object)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.BeginSetPermissions(Microsoft.WindowsAzure.Storage.Table.TablePermissions, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: BeginSetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1904
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nBegins an asynchronous request to set permissions for the table.\r\n"
  example: []
  syntax:
    content: public virtual ICancellableAsyncResult BeginSetPermissions(TablePermissions permissions, TableRequestOptions requestOptions, OperationContext operationContext, AsyncCallback callback, object state)
    content.vb: Public Overridable Function BeginSetPermissions(permissions As TablePermissions, requestOptions As TableRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult
    parameters:
    - id: permissions
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object that represents the permissions to set.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that will receive notification when the asynchronous operation completes.
    - id: state
      type: System.Object
      description: A user-defined object that will be passed to the callback delegate.
    return:
      type: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
      description: An <xref href="Microsoft.WindowsAzure.Storage.ICancellableAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndSetPermissions(System.IAsyncResult)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.EndSetPermissions(System.IAsyncResult)
  id: EndSetPermissions(System.IAsyncResult)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: EndSetPermissions(IAsyncResult)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.EndSetPermissions(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: EndSetPermissions
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1921
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nReturns the asynchronous result of the request to get the permissions settings for the table.\r\n"
  example: []
  syntax:
    content: public virtual void EndSetPermissions(IAsyncResult asyncResult)
    content.vb: Public Overridable Sub EndSetPermissions(asyncResult As IAsyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the pending asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions)
  id: SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: SetPermissionsAsync(TablePermissions)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1932
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to set permissions for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task SetPermissionsAsync(TablePermissions permissions)
    content.vb: Public Overridable Function SetPermissionsAsync(permissions As TablePermissions) As Task
    parameters:
    - id: permissions
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object that represents the permissions to set.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.Threading.CancellationToken)
  id: SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: SetPermissionsAsync(TablePermissions, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1944
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to set permissions for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task SetPermissionsAsync(TablePermissions permissions, CancellationToken cancellationToken)
    content.vb: Public Overridable Function SetPermissionsAsync(permissions As TablePermissions, cancellationToken As CancellationToken) As Task
    parameters:
    - id: permissions
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object that represents the permissions to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  id: SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: SetPermissionsAsync(TablePermissions, TableRequestOptions, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1957
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to set permissions for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task SetPermissionsAsync(TablePermissions permissions, TableRequestOptions requestOptions, OperationContext operationContext)
    content.vb: Public Overridable Function SetPermissionsAsync(permissions As TablePermissions, requestOptions As TableRequestOptions, operationContext As OperationContext) As Task
    parameters:
    - id: permissions
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object that represents the permissions to set.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  id: SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext,System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: SetPermissionsAsync(TablePermissions, TableRequestOptions, OperationContext, CancellationToken)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.TablePermissions, Microsoft.WindowsAzure.Storage.Table.TableRequestOptions, Microsoft.WindowsAzure.Storage.OperationContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: SetPermissionsAsync
    path: src/Storage/Lib/ClassLibraryCommon/Table/CloudTable.cs
    startLine: 1971
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitiates an asynchronous operation to set permissions for the table.\r\n"
  example: []
  syntax:
    content: public virtual Task SetPermissionsAsync(TablePermissions permissions, TableRequestOptions requestOptions, OperationContext operationContext, CancellationToken cancellationToken)
    content.vb: Public Overridable Function SetPermissionsAsync(permissions As TablePermissions, requestOptions As TableRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task
    parameters:
    - id: permissions
      type: Microsoft.WindowsAzure.Storage.Table.TablePermissions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TablePermissions" data-throw-if-not-resolved="false"></xref> object that represents the permissions to set.
    - id: requestOptions
      type: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.TableRequestOptions" data-throw-if-not-resolved="false"></xref> object that specifies additional options for the request.
    - id: operationContext
      type: Microsoft.WindowsAzure.Storage.OperationContext
      description: An <xref href="Microsoft.WindowsAzure.Storage.OperationContext" data-throw-if-not-resolved="false"></xref> object that represents the context for the current operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(System.Uri)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CloudTable(Uri)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CloudTable(System.Uri)
  type: Constructor
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable\" data-throw-if-not-resolved=\"false\"></xref> class.\r\n"
  example: []
  syntax:
    content: public CloudTable(Uri tableAddress)
    content.vb: Public Sub New(tableAddress As Uri)
    parameters:
    - id: tableAddress
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> specifying the absolute URI to the table.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(System.Uri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(System.Uri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  id: '#ctor(System.Uri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)'
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CloudTable(Uri, StorageCredentials)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CloudTable(System.Uri, Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  type: Constructor
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 48
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable\" data-throw-if-not-resolved=\"false\"></xref> class.\r\n"
  example: []
  syntax:
    content: public CloudTable(Uri tableAbsoluteUri, StorageCredentials credentials)
    content.vb: Public Sub New(tableAbsoluteUri As Uri, credentials As StorageCredentials)
    parameters:
    - id: tableAbsoluteUri
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> specifying the absolute URI to the table.
    - id: credentials
      type: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
      description: A <xref href="Microsoft.WindowsAzure.Storage.Auth.StorageCredentials" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(Microsoft.WindowsAzure.Storage.StorageUri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.#ctor(Microsoft.WindowsAzure.Storage.StorageUri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  id: '#ctor(Microsoft.WindowsAzure.Storage.StorageUri,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)'
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: CloudTable(StorageUri, StorageCredentials)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.CloudTable(Microsoft.WindowsAzure.Storage.StorageUri, Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  type: Constructor
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 58
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTable\" data-throw-if-not-resolved=\"false\"></xref> class.\r\n"
  example: []
  syntax:
    content: public CloudTable(StorageUri tableAddress, StorageCredentials credentials)
    content.vb: Public Sub New(tableAddress As StorageUri, credentials As StorageCredentials)
    parameters:
    - id: tableAddress
      type: Microsoft.WindowsAzure.Storage.StorageUri
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.CloudTable.StorageUri" data-throw-if-not-resolved="false"></xref> containing the absolute URI to the table at both the primary and secondary locations.
    - id: credentials
      type: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
      description: A <xref href="Microsoft.WindowsAzure.Storage.Auth.StorageCredentials" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ServiceClient
  commentId: P:Microsoft.WindowsAzure.Storage.Table.CloudTable.ServiceClient
  id: ServiceClient
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ServiceClient
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ServiceClient
  type: Property
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ServiceClient
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 81
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets the <xref href=\"Microsoft.WindowsAzure.Storage.Table.CloudTableClient\" data-throw-if-not-resolved=\"false\"></xref> object that represents the Table service.\r\n"
  example: []
  syntax:
    content: >-
      public CloudTableClient ServiceClient

      {

          get;

      }
    content.vb: Public ReadOnly Property ServiceClient As CloudTableClient
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.Table.CloudTableClient
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.CloudTableClient" data-throw-if-not-resolved="false"></xref> object .
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.Name
  commentId: P:Microsoft.WindowsAzure.Storage.Table.CloudTable.Name
  id: Name
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: Name
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.Name
  type: Property
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Name
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 87
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets the name of the table.\r\n"
  example: []
  syntax:
    content: >-
      public string Name

      {

          get;

      }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: A string containing the name of the table.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.Uri
  commentId: P:Microsoft.WindowsAzure.Storage.Table.CloudTable.Uri
  id: Uri
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: Uri
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.Uri
  type: Property
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Uri
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 93
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets the table URI for the primary location.\r\n"
  example: []
  syntax:
    content: >-
      public Uri Uri

      {

          get;

      }
    content.vb: Public ReadOnly Property Uri As Uri
    parameters: []
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> specifying the absolute URI to the table at the primary location.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.StorageUri
  commentId: P:Microsoft.WindowsAzure.Storage.Table.CloudTable.StorageUri
  id: StorageUri
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: StorageUri
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.StorageUri
  type: Property
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: StorageUri
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 105
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nGets the table's URIs for both the primary and secondary locations.\r\n"
  example: []
  syntax:
    content: >-
      public StorageUri StorageUri

      {

          get;

      }
    content.vb: Public ReadOnly Property StorageUri As StorageUri
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.StorageUri
      description: An object of type <xref href="Microsoft.WindowsAzure.Storage.Table.CloudTable.StorageUri" data-throw-if-not-resolved="false"></xref> containing the table's URIs for both the primary and secondary locations.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy)
  id: GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetSharedAccessSignature(SharedAccessTablePolicy)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetSharedAccessSignature
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 114
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nReturns a shared access signature for the table.\r\n"
  remarks: The query string returned includes the leading question mark.
  example: []
  syntax:
    content: public string GetSharedAccessSignature(SharedAccessTablePolicy policy)
    content.vb: Public Function GetSharedAccessSignature(policy As SharedAccessTablePolicy) As String
    parameters:
    - id: policy
      type: Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy" data-throw-if-not-resolved="false"></xref> object specifying the access policy for the shared access signature.
    return:
      type: System.String
      description: A shared access signature, as a URI query string.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the current credentials don't support creating a shared access signature.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String)
  id: GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetSharedAccessSignature(SharedAccessTablePolicy, String)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy, System.String)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetSharedAccessSignature
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 133
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nReturns a shared access signature for the table.\r\n"
  remarks: The query string returned includes the leading question mark.
  example: []
  syntax:
    content: public string GetSharedAccessSignature(SharedAccessTablePolicy policy, string accessPolicyIdentifier)
    content.vb: Public Function GetSharedAccessSignature(policy As SharedAccessTablePolicy, accessPolicyIdentifier As String) As String
    parameters:
    - id: policy
      type: Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy" data-throw-if-not-resolved="false"></xref> object specifying the access policy for the shared access signature.
    - id: accessPolicyIdentifier
      type: System.String
      description: A string identifying a stored access policy.
    return:
      type: System.String
      description: A shared access signature, as a URI query string.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the current credentials don't support creating a shared access signature.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String)
  id: GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetSharedAccessSignature(SharedAccessTablePolicy, String, String, String, String, String)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetSharedAccessSignature
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 156
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nReturns a shared access signature for the table.\r\n"
  remarks: The query string returned includes the leading question mark.
  example: []
  syntax:
    content: public string GetSharedAccessSignature(SharedAccessTablePolicy policy, string accessPolicyIdentifier, string startPartitionKey, string startRowKey, string endPartitionKey, string endRowKey)
    content.vb: Public Function GetSharedAccessSignature(policy As SharedAccessTablePolicy, accessPolicyIdentifier As String, startPartitionKey As String, startRowKey As String, endPartitionKey As String, endRowKey As String) As String
    parameters:
    - id: policy
      type: Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy" data-throw-if-not-resolved="false"></xref> object specifying the access policy for the shared access signature.
    - id: accessPolicyIdentifier
      type: System.String
      description: A string identifying a stored access policy.
    - id: startPartitionKey
      type: System.String
      description: A string specifying the start partition key, or <code>null</code>.
    - id: startRowKey
      type: System.String
      description: A string specifying the start row key, or <code>null</code>.
    - id: endPartitionKey
      type: System.String
      description: A string specifying the end partition key, or <code>null</code>.
    - id: endRowKey
      type: System.String
      description: A string specifying the end row key, or <code>null</code>.
    return:
      type: System.String
      description: A shared access signature, as a URI query string.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the current credentials don't support creating a shared access signature.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String,System.Nullable{Microsoft.WindowsAzure.Storage.SharedAccessProtocol},Microsoft.WindowsAzure.Storage.IPAddressOrRange)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String,System.Nullable{Microsoft.WindowsAzure.Storage.SharedAccessProtocol},Microsoft.WindowsAzure.Storage.IPAddressOrRange)
  id: GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy,System.String,System.String,System.String,System.String,System.String,System.Nullable{Microsoft.WindowsAzure.Storage.SharedAccessProtocol},Microsoft.WindowsAzure.Storage.IPAddressOrRange)
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: GetSharedAccessSignature(SharedAccessTablePolicy, String, String, String, String, String, Nullable<SharedAccessProtocol>, IPAddressOrRange)
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy, System.String, System.String, System.String, System.String, System.String, System.Nullable<Microsoft.WindowsAzure.Storage.SharedAccessProtocol>, Microsoft.WindowsAzure.Storage.IPAddressOrRange)
  type: Method
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: GetSharedAccessSignature
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 181
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nReturns a shared access signature for the table.\r\n"
  remarks: The query string returned includes the leading question mark.
  example: []
  syntax:
    content: public string GetSharedAccessSignature(SharedAccessTablePolicy policy, string accessPolicyIdentifier, string startPartitionKey, string startRowKey, string endPartitionKey, string endRowKey, SharedAccessProtocol? protocols, IPAddressOrRange ipAddressOrRange)
    content.vb: Public Function GetSharedAccessSignature(policy As SharedAccessTablePolicy, accessPolicyIdentifier As String, startPartitionKey As String, startRowKey As String, endPartitionKey As String, endRowKey As String, protocols As SharedAccessProtocol?, ipAddressOrRange As IPAddressOrRange) As String
    parameters:
    - id: policy
      type: Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy
      description: A <xref href="Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy" data-throw-if-not-resolved="false"></xref> object specifying the access policy for the shared access signature.
    - id: accessPolicyIdentifier
      type: System.String
      description: A string identifying a stored access policy.
    - id: startPartitionKey
      type: System.String
      description: A string specifying the start partition key, or <code>null</code>.
    - id: startRowKey
      type: System.String
      description: A string specifying the start row key, or <code>null</code>.
    - id: endPartitionKey
      type: System.String
      description: A string specifying the end partition key, or <code>null</code>.
    - id: endRowKey
      type: System.String
      description: A string specifying the end row key, or <code>null</code>.
    - id: protocols
      type: System.Nullable{Microsoft.WindowsAzure.Storage.SharedAccessProtocol}
      description: The allowed protocols (https only, or http and https). Null if you don't want to restrict protocol.
    - id: ipAddressOrRange
      type: Microsoft.WindowsAzure.Storage.IPAddressOrRange
      description: The allowed IP address or IP address range. Null if you don't want to restrict based on IP address.
    return:
      type: System.String
      description: A shared access signature, as a URI query string.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the current credentials don't support creating a shared access signature.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.CloudTable.GetSharedAccessSignature(Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy, System.String, System.String, System.String, System.String, System.String, System.Nullable(Of Microsoft.WindowsAzure.Storage.SharedAccessProtocol), Microsoft.WindowsAzure.Storage.IPAddressOrRange)
  name.vb: GetSharedAccessSignature(SharedAccessTablePolicy, String, String, String, String, String, Nullable(Of SharedAccessProtocol), IPAddressOrRange)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ToString
  commentId: M:Microsoft.WindowsAzure.Storage.Table.CloudTable.ToString
  id: ToString
  parent: Microsoft.WindowsAzure.Storage.Table.CloudTable
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable.ToString()
  type: Method
  source:
    remote:
      path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ToString
    path: src/Storage/Lib/Common/Table/CloudTable.Common.cs
    startLine: 234
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\r\nReturns the name of the table.\r\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string containing the name of the table.
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
- uid: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableRequestOptions
  fullName: Microsoft.WindowsAzure.Storage.Table.TableRequestOptions
- uid: Microsoft.WindowsAzure.Storage.OperationContext
  parent: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: OperationContext
  fullName: Microsoft.WindowsAzure.Storage.OperationContext
- uid: Microsoft.WindowsAzure.Storage.Table.TableResult
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableResult
  fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
- uid: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  fullName: System.AsyncCallback
- uid: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
  parent: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: ICancellableAsyncResult
  fullName: Microsoft.WindowsAzure.Storage.ICancellableAsyncResult
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TableResult>
  fullName: System.Threading.Tasks.Task<Microsoft.WindowsAzure.Storage.Table.TableResult>
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.WindowsAzure.Storage.Table.TableResult)
  name.vb: Task(Of TableResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TableResult
    name: TableResult
    fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TableResult
    name: TableResult
    fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableBatchOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
- uid: System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TableResult>
  fullName: System.Collections.Generic.IList<Microsoft.WindowsAzure.Storage.Table.TableResult>
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.WindowsAzure.Storage.Table.TableResult)
  name.vb: IList(Of TableResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TableResult
    name: TableResult
    fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TableResult
    name: TableResult
    fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.WindowsAzure.Storage.Table.TableResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<TableResult>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.WindowsAzure.Storage.Table.TableResult>>
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Microsoft.WindowsAzure.Storage.Table.TableResult))
  name.vb: Task(Of IList(Of TableResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TableResult
    name: TableResult
    fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TableResult
    name: TableResult
    fullName: Microsoft.WindowsAzure.Storage.Table.TableResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  isExternal: false
  name: DynamicTableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableQuery
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
- uid: System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DynamicTableEntity>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity>
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)
  name.vb: IEnumerable(Of DynamicTableEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
    name: DynamicTableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
    name: DynamicTableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableQuerySegment<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement)
  name.vb: TableQuerySegment(Of TElement)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableContinuationToken
  fullName: Microsoft.WindowsAzure.Storage.Table.TableContinuationToken
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  name: TableQuerySegment<DynamicTableEntity>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)
  name.vb: TableQuerySegment(Of DynamicTableEntity)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
    name: DynamicTableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
    name: DynamicTableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TableQuerySegment<DynamicTableEntity>>
  fullName: System.Threading.Tasks.Task<Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity>>
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity))
  name.vb: Task(Of TableQuerySegment(Of DynamicTableEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
    name: DynamicTableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
    name: DynamicTableEntity
    fullName: Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: EntityResolver<T>
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver<T>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of T)
  name.vb: EntityResolver(Of T)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  name: EntityResolver<TResult>
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult)
  name.vb: EntityResolver(Of TResult)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  name: TableQuerySegment<TResult>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TResult>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TResult)
  name.vb: TableQuerySegment(Of TResult)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TResult}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TableQuerySegment<TResult>>
  fullName: System.Threading.Tasks.Task<Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TResult>>
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TResult))
  name.vb: Task(Of TableQuerySegment(Of TResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: CloudTable
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTable
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuery(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmented(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,Microsoft.WindowsAzure.Storage.Table.TableRequestOptions,Microsoft.WindowsAzure.Storage.OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken)
- uid: Microsoft.WindowsAzure.Storage.Table.Queryable
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table.Queryable
  fullName: Microsoft.WindowsAzure.Storage.Table.Queryable
- uid: WithOptions
- uid: WithContext
- uid: AsTableQuery
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery{{TElement}}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
  name: TableQuery<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement)
  name.vb: TableQuery(Of TElement)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableQuery<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery<TElement>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuery(Of TElement)
  name.vb: TableQuery(Of TElement)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuery`1
    name: TableQuery
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TElement}}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
  name: TableQuerySegment<TElement>
  fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement)
  name.vb: TableQuerySegment(Of TElement)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TableQuerySegment{{TElement}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TableQuerySegment<TElement>>
  fullName: System.Threading.Tasks.Task<Microsoft.WindowsAzure.Storage.Table.TableQuerySegment<TElement>>
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.WindowsAzure.Storage.Table.TableQuerySegment(Of TElement))
  name.vb: Task(Of TableQuerySegment(Of TElement))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1
    name: TableQuerySegment
    fullName: Microsoft.WindowsAzure.Storage.Table.TableQuerySegment
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.TablePermissions
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TablePermissions
  fullName: Microsoft.WindowsAzure.Storage.Table.TablePermissions
- uid: System.Threading.Tasks.Task{Microsoft.WindowsAzure.Storage.Table.TablePermissions}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TablePermissions>
  fullName: System.Threading.Tasks.Task<Microsoft.WindowsAzure.Storage.Table.TablePermissions>
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.WindowsAzure.Storage.Table.TablePermissions)
  name.vb: Task(Of TablePermissions)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TablePermissions
    name: TablePermissions
    fullName: Microsoft.WindowsAzure.Storage.Table.TablePermissions
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TablePermissions
    name: TablePermissions
    fullName: Microsoft.WindowsAzure.Storage.Table.TablePermissions
  - name: )
    fullName: )
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  fullName: System.Uri
- uid: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
  parent: Microsoft.WindowsAzure.Storage.Auth
  isExternal: false
  name: StorageCredentials
  fullName: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
- uid: Microsoft.WindowsAzure.Storage.Auth
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Auth
  fullName: Microsoft.WindowsAzure.Storage.Auth
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTable.StorageUri
- uid: Microsoft.WindowsAzure.Storage.StorageUri
  parent: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: StorageUri
  fullName: Microsoft.WindowsAzure.Storage.StorageUri
- uid: Microsoft.WindowsAzure.Storage.Table.CloudTableClient
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: CloudTableClient
  fullName: Microsoft.WindowsAzure.Storage.Table.CloudTableClient
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: SharedAccessTablePolicy
  fullName: Microsoft.WindowsAzure.Storage.Table.SharedAccessTablePolicy
- uid: System.InvalidOperationException
- uid: System.Nullable{Microsoft.WindowsAzure.Storage.SharedAccessProtocol}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SharedAccessProtocol>
  fullName: System.Nullable<Microsoft.WindowsAzure.Storage.SharedAccessProtocol>
  fullname.vb: System.Nullable(Of Microsoft.WindowsAzure.Storage.SharedAccessProtocol)
  name.vb: Nullable(Of SharedAccessProtocol)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.SharedAccessProtocol
    name: SharedAccessProtocol
    fullName: Microsoft.WindowsAzure.Storage.SharedAccessProtocol
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.SharedAccessProtocol
    name: SharedAccessProtocol
    fullName: Microsoft.WindowsAzure.Storage.SharedAccessProtocol
  - name: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.IPAddressOrRange
  parent: Microsoft.WindowsAzure.Storage
  isExternal: false
  name: IPAddressOrRange
  fullName: Microsoft.WindowsAzure.Storage.IPAddressOrRange
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
