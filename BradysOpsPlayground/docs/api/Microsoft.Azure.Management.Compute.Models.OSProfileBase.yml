items:
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  commentId: T:Microsoft.Azure.Management.Compute.Models.OSProfileBase
  id: OSProfileBase
  parent: Microsoft.Azure.Management.Compute.Models
  children:
  - Microsoft.Azure.Management.Compute.Models.OSProfileBase.#ctor
  - Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminPassword
  - Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminUsername
  - Microsoft.Azure.Management.Compute.Models.OSProfileBase.CustomData
  - Microsoft.Azure.Management.Compute.Models.OSProfileBase.LinuxConfiguration
  - Microsoft.Azure.Management.Compute.Models.OSProfileBase.Secrets
  - Microsoft.Azure.Management.Compute.Models.OSProfileBase.WindowsConfiguration
  langs:
  - csharp
  - vb
  name: OSProfileBase
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  type: Class
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: OSProfileBase
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nDescribes the base OS profile.\r\n"
  example: []
  syntax:
    content: public class OSProfileBase
    content.vb: Public Class OSProfileBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminPassword
  commentId: P:Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminPassword
  id: AdminPassword
  parent: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  langs:
  - csharp
  - vb
  name: AdminPassword
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminPassword
  type: Property
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: AdminPassword
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 39
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nOptional. Gets or sets the admin user password.\r\n"
  example: []
  syntax:
    content: >-
      public string AdminPassword

      {

          get;

          set;

      }
    content.vb: Public Property AdminPassword As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminUsername
  commentId: P:Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminUsername
  id: AdminUsername
  parent: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  langs:
  - csharp
  - vb
  name: AdminUsername
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase.AdminUsername
  type: Property
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: AdminUsername
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nOptional. Gets or sets the admin user name.\r\n"
  example: []
  syntax:
    content: >-
      public string AdminUsername

      {

          get;

          set;

      }
    content.vb: Public Property AdminUsername As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase.CustomData
  commentId: P:Microsoft.Azure.Management.Compute.Models.OSProfileBase.CustomData
  id: CustomData
  parent: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  langs:
  - csharp
  - vb
  name: CustomData
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase.CustomData
  type: Property
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CustomData
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 61
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nOptional. Gets or sets a base-64 encoded string of custom data.\r\n"
  example: []
  syntax:
    content: >-
      public string CustomData

      {

          get;

          set;

      }
    content.vb: Public Property CustomData As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase.LinuxConfiguration
  commentId: P:Microsoft.Azure.Management.Compute.Models.OSProfileBase.LinuxConfiguration
  id: LinuxConfiguration
  parent: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  langs:
  - csharp
  - vb
  name: LinuxConfiguration
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase.LinuxConfiguration
  type: Property
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: LinuxConfiguration
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 72
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nOptional. Gets or sets the Linux Configuration of the OS profile.\r\n"
  example: []
  syntax:
    content: >-
      public LinuxConfiguration LinuxConfiguration

      {

          get;

          set;

      }
    content.vb: Public Property LinuxConfiguration As LinuxConfiguration
    parameters: []
    return:
      type: Microsoft.Azure.Management.Compute.Models.LinuxConfiguration
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase.Secrets
  commentId: P:Microsoft.Azure.Management.Compute.Models.OSProfileBase.Secrets
  id: Secrets
  parent: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  langs:
  - csharp
  - vb
  name: Secrets
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase.Secrets
  type: Property
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: Secrets
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 84
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nOptional. Gets or sets the List of certificates for addition to the\r\nVM.\r\n"
  example: []
  syntax:
    content: >-
      public IList<VaultSecretGroup> Secrets

      {

          get;

          set;

      }
    content.vb: Public Property Secrets As IList(Of VaultSecretGroup)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Management.Compute.Models.VaultSecretGroup}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase.WindowsConfiguration
  commentId: P:Microsoft.Azure.Management.Compute.Models.OSProfileBase.WindowsConfiguration
  id: WindowsConfiguration
  parent: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  langs:
  - csharp
  - vb
  name: WindowsConfiguration
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase.WindowsConfiguration
  type: Property
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: WindowsConfiguration
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 95
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nOptional. Gets or sets the Windows Configuration of the OS profile.\r\n"
  example: []
  syntax:
    content: >-
      public WindowsConfiguration WindowsConfiguration

      {

          get;

          set;

      }
    content.vb: Public Property WindowsConfiguration As WindowsConfiguration
    parameters: []
    return:
      type: Microsoft.Azure.Management.Compute.Models.WindowsConfiguration
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Compute.Models.OSProfileBase.#ctor
  commentId: M:Microsoft.Azure.Management.Compute.Models.OSProfileBase.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Management.Compute.Models.OSProfileBase
  langs:
  - csharp
  - vb
  name: OSProfileBase()
  fullName: Microsoft.Azure.Management.Compute.Models.OSProfileBase.OSProfileBase()
  type: Constructor
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: .ctor
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/OSProfileBase.cs
    startLine: 104
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nInitializes a new instance of the OSProfileBase class.\r\n"
  example: []
  syntax:
    content: public OSProfileBase()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.Compute.Models
  isExternal: false
  name: Microsoft.Azure.Management.Compute.Models
  fullName: Microsoft.Azure.Management.Compute.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Microsoft.Azure.Management.Compute.Models.LinuxConfiguration
  parent: Microsoft.Azure.Management.Compute.Models
  isExternal: false
  name: LinuxConfiguration
  fullName: Microsoft.Azure.Management.Compute.Models.LinuxConfiguration
- uid: System.Collections.Generic.IList{Microsoft.Azure.Management.Compute.Models.VaultSecretGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<VaultSecretGroup>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Management.Compute.Models.VaultSecretGroup>
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Management.Compute.Models.VaultSecretGroup)
  name.vb: IList(Of VaultSecretGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.Compute.Models.VaultSecretGroup
    name: VaultSecretGroup
    fullName: Microsoft.Azure.Management.Compute.Models.VaultSecretGroup
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Compute.Models.VaultSecretGroup
    name: VaultSecretGroup
    fullName: Microsoft.Azure.Management.Compute.Models.VaultSecretGroup
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Management.Compute.Models.WindowsConfiguration
  parent: Microsoft.Azure.Management.Compute.Models
  isExternal: false
  name: WindowsConfiguration
  fullName: Microsoft.Azure.Management.Compute.Models.WindowsConfiguration
