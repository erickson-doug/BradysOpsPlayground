items:
- uid: Microsoft.Azure.Management.Compute.Models.CachingTypes
  commentId: T:Microsoft.Azure.Management.Compute.Models.CachingTypes
  id: CachingTypes
  parent: Microsoft.Azure.Management.Compute.Models
  children:
  - Microsoft.Azure.Management.Compute.Models.CachingTypes.None
  - Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadOnly
  - Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadWrite
  langs:
  - csharp
  - vb
  name: CachingTypes
  fullName: Microsoft.Azure.Management.Compute.Models.CachingTypes
  type: Class
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: CachingTypes
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nThe caching types of OS or data disk.\r\n"
  example: []
  syntax:
    content: public class CachingTypes
    content.vb: Public Class CachingTypes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.Compute.Models.CachingTypes.None
  commentId: F:Microsoft.Azure.Management.Compute.Models.CachingTypes.None
  id: None
  parent: Microsoft.Azure.Management.Compute.Models.CachingTypes
  langs:
  - csharp
  - vb
  name: None
  fullName: Microsoft.Azure.Management.Compute.Models.CachingTypes.None
  type: Field
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: None
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nNo Caching, which is default for data disks.\r\n"
  example: []
  syntax:
    content: public const string None = "None"
    content.vb: Public Const None As String = "None"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadOnly
  commentId: F:Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadOnly
  id: ReadOnly
  parent: Microsoft.Azure.Management.Compute.Models.CachingTypes
  langs:
  - csharp
  - vb
  name: ReadOnly
  fullName: Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadOnly
  type: Field
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ReadOnly
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
    startLine: 39
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nRead Only Caching.\r\n"
  example: []
  syntax:
    content: public const string ReadOnly = "ReadOnly"
    content.vb: Public Const ReadOnly As String = "ReadOnly"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadWrite
  commentId: F:Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadWrite
  id: ReadWrite
  parent: Microsoft.Azure.Management.Compute.Models.CachingTypes
  langs:
  - csharp
  - vb
  name: ReadWrite
  fullName: Microsoft.Azure.Management.Compute.Models.CachingTypes.ReadWrite
  type: Field
  source:
    remote:
      path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
      branch: master
      repo: https://github.com/bradygaster/BradysOpsPlayground.git
    id: ReadWrite
    path: BradysOpsPlayground/src/ResourceManagement/Compute/ComputeManagement/Generated/Models/CachingTypes.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.Management.Compute
  namespace: Microsoft.Azure.Management.Compute.Models
  summary: "\r\nReadWrite Caching, which is default for OS disks.\r\n"
  example: []
  syntax:
    content: public const string ReadWrite = "ReadWrite"
    content.vb: Public Const ReadWrite As String = "ReadWrite"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Microsoft.Azure.Management.Compute.Models
  isExternal: false
  name: Microsoft.Azure.Management.Compute.Models
  fullName: Microsoft.Azure.Management.Compute.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
