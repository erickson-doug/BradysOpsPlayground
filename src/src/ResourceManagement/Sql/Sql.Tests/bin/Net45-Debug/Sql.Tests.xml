<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sql.Tests</name>
    </assembly>
    <members>
        <member name="T:Sql2.Tests.BasicDelegatingHandler">
            <summary>
            Basic passthrough implementation of the Delegating handler
            </summary>
        </member>
        <member name="M:Sql2.Tests.BasicDelegatingHandler.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sql2.Tests.BasicDelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Passes the async operation to the base class
            </summary>
            <param name="request">The request to send</param>
            <param name="cancellationToken">The cancellation token for the async operation</param>
            <returns>The async task</returns>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest">
            <summary>
            Contains tests for Azure SQL Database backup operations.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest.ListRestorePointsTest">
            <summary>
            Test for List Azure SQL Database Restore Points operations.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest.ListGeoBackupsTest">
            <summary>
            Test for List Azure SQL Database Geo Backups operations.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest.ListDeletedDatabaseBackupTest">
            <summary>
            Test for List Azure SQL Database deleted database operations.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest.ServerLTRVaultTest">
            <summary>
            Test for Azure SQL Server Backup Long Term Retention Vault operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest.DatabaseLTRPolicyTest">
            <summary>
            Test for Azure SQL Database Backup Long Term Retention Policy operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest.RestoreTest">
            <summary>
            Test for List Azure SQL Database Restore operations.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2BackupScenarioTest.ValidateRestorePointListResponse(Microsoft.Azure.Management.Sql.Models.RestorePointListResponse,System.Boolean,System.Int32)">
            <summary>
            Validates the RestorePointListResponse.
            </summary>
            <param name="restorePointsListResponse">Response to validate.</param>
            <param name="isDataWarehouseDatabase">Is this response from a data warehouse database? Data warehouse databases return different values than other databases.</param>
            <param name="expectedCount">Expected number of restore points.</param>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ImportExportScenarioTests">
            <summary>
            Contains tests for Import/Export Operations
            </summary>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2JobAccountScenarioTest">
            <summary>
            Contains tests for job account CRUD
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2JobAccountScenarioTest.JobAccountCRUDTest">
            <summary>
            Tests for the job account CRUD operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2JobAccountScenarioTest.VerifyJobAccountInformation(Microsoft.Azure.Management.Sql.Models.JobAccount,System.String,System.String)">
            <summary>
            Verify that the Database object matches the provided values
            </summary>
            <param name="jobAccount">The job account.</param>
            <param name="jobAccountName">Name of the job account.</param>
            <param name="databaseId">The database identifier.</param>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2SecurityAlertScenarioTests">
            <summary>
            Contains tests for the lifecycle of a Database SecurityAlert policy
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecurityAlertScenarioTests.TestDatabaseSecurityAlertAPIs(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            The non-boilerplated test code of the APIs for managing the lifecycle of a given database's security alert policy. It is meant to be called with a name of an already existing database (and therefore already existing 
            server and resource group). This test does not create these resources and does not remove them.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecurityAlertScenarioTests.GetDefaultDatabaseSecurityAlertProperties">
            <summary>
            Creates and returns a DatabaseSecurityAlertPolicyProperties object that holds the default settings for a database security alert policy
            </summary>
            <returns>A DatabaseSecurityAlertPolicyProperties object with the default security alert policy settings</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecurityAlertScenarioTests.VerifyDatabaseSecurityAlertPolicyInformation(Microsoft.Azure.Management.Sql.Models.DatabaseSecurityAlertPolicyProperties,Microsoft.Azure.Management.Sql.Models.DatabaseSecurityAlertPolicyProperties)">
            <summary>
            Verify that the received properties match their expected values
            </summary>
            <param name="expected">The expected value of the properties object</param>
            <param name="actual">The properties object that needs to be checked</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecurityAlertScenarioTests.ChangeDataBaseSecurityAlertPolicy(Microsoft.Azure.Management.Sql.Models.DatabaseSecurityAlertPolicyProperties)">
            <summary>
            Changes the database security alert policy with new values
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecurityAlertScenarioTests.DatabaseSecurityAlertPolicyLifecycleTest">
            <summary>
            Test for the Security alert policy lifecycle
            </summary>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ElasticPoolScenarioTests">
            <summary>
            Contains tests for ElasticPools
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ElasticPoolScenarioTests.ValidateElasticPool(Microsoft.Azure.Management.Sql.Models.ElasticPool,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Validates the Elastic pool properties
            </summary>
            <param name="pool">The elastic pool to validate</param>
            <param name="poolName">The expected name of the pool</param>
            <param name="edition">The expected edition of the pool</param>
            <param name="dbDtuCap">The expected max DTU of a database in the pool</param>
            <param name="dbDtu">The expected min DTU of a database in the pool</param>
            <param name="dtuGuarantee">The expected DTU of the pool</param>
            <param name="storageLimit">The expected storage limit of the pool</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2LocationCapabilitiesTests.LocationCapabilitiesTest">
            <summary>
            Test to ensure that the Location Capabilites API is working correctly
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2LocationCapabilitiesTests.NormalizedRegionName(System.String)">
            <summary>
            Given a string normalizes it by removing all spaces and setting all characters to lowercase
            </summary>
            <param name="name">The name to normalize</param>
            <returns>The result of normalization</returns>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2RecommendedIndexScenarioTests">
            <summary>
            Contains tests for recommended elastic pools
            </summary>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ServerAdministratorScenarioTests">
            <summary>
            Contains tests for Azure SQL Server Active Directory Administrator CRUD
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerAdministratorScenarioTests.ServerAdministratorCRUDTest">
            <summary>
            Test for the Azure SQL Server Active Directory Administrator CRUD operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerAdministratorScenarioTests.VerifyServerAdministratorInformation(System.String,System.Guid,System.Guid,Microsoft.Azure.Management.Sql.Models.ServerAdministrator)">
            <summary>
            Verify that the Server Administrator object matches the provided values
            </summary>
            <param name="activeDirectoryAdminLogin">The expected admin login</param>
            <param name="acitveDirectoryAdminSid">The expected Active Directory User or Group Sid</param>
            <param name="activeDirectoryTenantId">The expected Active Directory tenant id</param>
            <param name="serverAdministrator">The actual server object</param>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ServerCommunicationLinkScenarioTests">
            <summary>
            Contains tests for ServerCommunicationLink
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerCommunicationLinkScenarioTests.ValidateServerCommunicationLink(Microsoft.Azure.Management.Sql.Models.ServerCommunicationLink,System.String,System.String)">
            <summary>
            Validates the Server communication link properties
            </summary>
            <param name="link">The Server communication link to validate</param>
            <param name="linkName">The expected name</param>
            <param name="partnerServer">The expected name of the partner server</param>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ServerDisasterRecoveryConfigurationScenarioTests">
            <summary>
            Contains tests for ServerDisasterRecoveryConfiguration
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerDisasterRecoveryConfigurationScenarioTests.GetAndValidateDrc(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            GETs and validates the server disaster recovery configuration
            </summary>
            <param name="sqlClient">The Sql client used to GET the server disaster recovery configuration</param>
            <param name="resGroupName">The resource group of the server with the server disaster recovery configuration</param>
            <param name="serverName">The server with the server disaster recovery configuration</param>
            <param name="virtualEndpointName">The virtual endpoint name of the server disaster recovery configuration</param>
            <param name="partnerServerName">The expected partner server in the server disaster recovery configuration</param>
            <param name="primary">Whether the server disaster recovery configuration notes its server as having primary role</param>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ServiceTierAdvisorScenarioTests">
            <summary>
            Contains tests for service tier advisor
            </summary>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2RecommendedElasticPoolScenarioTests">
            <summary>
            Contains tests for recommended elastic pools
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2RecommendedElasticPoolScenarioTests.ValidateRecommendedElasticPoolMetric(Microsoft.Azure.Management.Sql.Models.RecommendedElasticPoolMetric,System.DateTime,System.Double,System.Double)">
            <summary>
            Validate metrics for recommended elastic pool.
            </summary>
            <param name="recommendedElasticPoolsMetric"></param>
            <param name="dateTime">DateTeim</param>
            <param name="dtu">Dtu</param>
            <param name="sizeGB">Size in gigabytes</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2RecommendedElasticPoolScenarioTests.ValidateRecommendedElasticPool(Microsoft.Azure.Management.Sql.Models.RecommendedElasticPool,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.DateTime,System.DateTime,System.Single,System.Single)">
            <summary>
            Validate recommended elastic pool properties
            </summary>
            <param name="recommendedElasticPool">Recommended elastic pool object</param>
            <param name="name">Name</param>
            <param name="type">Type</param>
            <param name="edition">Edition</param>
            <param name="dtu">Dtu</param>
            <param name="databaseDtuMin">Dtu min</param>
            <param name="databaseDtuMax">Dtu max</param>
            <param name="storageMB">Storage MB</param>
            <param name="observationPeriodStart">Observation start</param>
            <param name="observationPeriodEnd">Observation end</param>
            <param name="maxObservedDtu">Max observed Dtu</param>
            <param name="maxObservedStorageMB">Max observed storage MB</param>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2SecureConnectionScenarioTest">
            <summary>
            Contains tests for the lifecycle of a Database SecureConnection policy
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecureConnectionScenarioTest.TestSecureConnectionAPIs(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary> 
            The non-boilerplated test code of the APIs for managing the lifecycle of a given database's secure connection policy. 
            It is meant to be called with a name of an already exisiting database (and therefore already existing server and resource group). 
            </summary> 
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecureConnectionScenarioTest.ConvertToSecureConnectionPolicyCreateProperties(Microsoft.Azure.Management.Sql.Models.DatabaseSecureConnectionPolicyProperties)">
            <summary>
            Converts the given SecureConnectionPolicyProperties to a SecureConnectionPolicyCreateOrUpdateProperties that has the same values for the properties
            </summary>
            <param name="properties">The properties to be used for creating the returned value</param>
            <returns>A SecureConnectionPolicyCreateOrUpdateProperties which reflected the given properties</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecureConnectionScenarioTest.getDefaultSecureConnectionPolicyProperties(System.String)">
            <summary>
            Creates and returns a DatabaseAuditingPolicyProperties object that holds the default settings for a a database auditing policy
            </summary>
            <returns>A DatabaseAuditingPolicyProperties object with the default audit policy settings</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecureConnectionScenarioTest.VerifySecureConnectionPolicyInformation(Microsoft.Azure.Management.Sql.Models.DatabaseSecureConnectionPolicyProperties,Microsoft.Azure.Management.Sql.Models.DatabaseSecureConnectionPolicyProperties)">
            <summary>
            Verify that the received properties match their expected values
            </summary>
            <param name="actual">The properties object that needs to be checked</param>
            <param name="expected">The expected value of the properties object</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2SecureConnectionScenarioTest.SecureConnectionPolicyLifecycleTest">
            <summary>
            Test for the Auditing policy lifecycle
            </summary>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ScenarioTest">
            <summary>
            Contains tests for server CRUD, database CRUD, and firewall CRUD
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.ServerCRUDTest">
            <summary>
            Test for the server CRUD operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.DatabaseCRUDTest">
            <summary>
            Tests for the database CRUD operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.DatabaseActivationTest">
            <summary>
            Test for Azure SQL Data Warehouse database pause and resume operations.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.FirewallCRUDTest">
            <summary>
            Tests for firewall CRUD operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.TransparentDataEncryptionCRUDTest">
            <summary>
            Tests for transparent data encryption CRUD operations
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.VerifyTransparentDataEncryptionInformation(System.String,Microsoft.Azure.Management.Sql.Models.TransparentDataEncryption)">
            <summary>
            Verifies that the Transparent Data Encryption values match the expected values
            </summary>
            <param name="state">The expected rule name</param>
            <param name="tde">The expected start IP address</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.VerifyTransparentDataEncryptionActivityInformation(System.String,Microsoft.Azure.Management.Sql.Models.TransparentDataEncryptionActivity)">
            <summary>
            Verifies that the Transparent Data Encryption Activity values match the expected values
            </summary>
            <param name="state">The expected rule name</param>
            <param name="tdeActivity">The expected start IP address</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.VerifyFirewallRuleInformation(System.String,System.String,System.String,Microsoft.Azure.Management.Sql.Models.FirewallRule)">
            <summary>
            Verifies that the FirewallRule values match the expected values
            </summary>
            <param name="firewallRuleName">The expected rule name</param>
            <param name="startIp1">The expected start IP address</param>
            <param name="endIp1">The expected end IP address</param>
            <param name="rule">The actual rule information</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.VerifyDatabaseInformation(Microsoft.Azure.Management.Sql.Models.Database,System.String,System.String,System.String,System.Int64,System.Guid,System.Guid,System.String)">
            <summary>
            Verify that the Database object matches the provided values
            </summary>
            <param name="serverLocation">The expected server location</param>
            <param name="databaseCollation">The expected database collation</param>
            <param name="databaseEdition">The expected database edition</param>
            <param name="databaseMaxSize">The expected database max size</param>
            <param name="currentSlo">The expected database service objective</param>
            <param name="db">The actual database object</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioTest.VerifyServerInformation(System.String,System.String,System.String,System.String,System.String,Microsoft.Azure.Management.Sql.Models.Server)">
            <summary>
            Verify that the Server object matches the provided values
            </summary>
            <param name="serverName">The expected server name</param>
            <param name="serverLocation">The expected server location</param>
            <param name="adminLogin">The expected admin login</param>
            <param name="adminPassword">The expected password</param>
            <param name="version">The expected version</param>
            <param name="server">The actual server object</param>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests">
            <summary>
            Contains tests for the lifecycle of a Database data masking policy and data masking rules
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.MakeDefaultDataMaskingPolicyProperties">
            <summary>
            Creates and returns a DataMaskingPolicyProperties object that holds the default settings for a data masking policy
            </summary>
            <returns>A DataMaskingPolicyProperties object with the default policy settings</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.VerifyDataMaskingPolicyInformation(Microsoft.Azure.Management.Sql.Models.DataMaskingPolicyProperties,Microsoft.Azure.Management.Sql.Models.DataMaskingPolicyProperties)">
            <summary>
            Verify that the received properties match their expected values
            </summary>
            <param name="expected">The expected value of the properties object</param>
            <param name="actual">The properties object that needs to be checked</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.TestDataMaskingPolicyAPIs(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            The non-boilerplated test code of the APIs for managing the lifecycle of a given database's data masking policy. It is meant to be called with a name of an already exisiting database (and therefore already existing 
            server and resource group). This test does not create these resources and does not remove them.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.MakeRuleProperties(System.Int32,System.String,System.String)">
            <summary>
            Create a data masking rule
            </summary>
            <param name="uniqueId">A unique id to act as a seed for the ruleId, the masked table name and the masked column name</param>
            <returns>A DataMaskingRuleProperties describing the rule</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.VerifyDataMaskingRuleInformation(Microsoft.Azure.Management.Sql.Models.DataMaskingRuleProperties,Microsoft.Azure.Management.Sql.Models.DataMaskingRuleProperties)">
            <summary>
            Verify that the received properties match their expected values
            </summary>
            <param name="actual">The properties object that needs to be checked</param>
            <param name="expected">The expected value of the properties object</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.TestDataMaskingRuleAPIs(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            The non-boilerplated test code of the APIs for managing the lifecycle data masking rules. 
            It is meant to be called with a name of an already exisiting database (and therefore already existing server and resource group). 
            This test does not create these resources and does not remove them.
            The flow is:
            1) Create policy (it's a prereq)
            2) Create rule1, validate its creation and its content by doing another GET call
            3) Update rule1, validate the update by doing another GET call
            4) Create rule2, validate its creation and its content
            5) Get the list of rules, see that there are two and each one of them has the right content
            6) Delete rule1, see that we get OK
            8) List the rules, see that we now have one rule there and it is rule 2
            </summary>
            <param name="sqlClient">The sqlClient</param>
            <param name="resourceGroupName">The resource group name to use in this test</param>
            <param name="server">The server to use in this test</param>
            <param name="database">The database to use in this test</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.DataMaskingPolicyLifecycleTest">
            <summary>
            Test for the data masking policy lifecycle
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2DataMaskingScenarioTests.DataMaskingRuleLifecycleTest">
            <summary>
            Test for the data masking policy lifecycle
            </summary>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest">
            <summary>
            Contains tests for the lifecycle of a Database and server auditing policy
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.TestDatabaseAuditingAPIs(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            The non-boilerplated test code of the APIs for managing the lifecycle of a given database's auditing policy. It is meant to be called with a name of an already existing database (and therefore already existing 
            server and resource group). This test does not create these resources and does not remove them.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.GetDefaultDatabaseAuditProperties">
            <summary>
            Creates and returns a DatabaseAuditingPolicyProperties object that holds the default settings for a a database auditing policy
            </summary>
            <returns>A DatabaseAuditingPolicyProperties object with the default audit policy settings</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.VerifyDatabaseAuditingPolicyInformation(Microsoft.Azure.Management.Sql.Models.DatabaseAuditingPolicyProperties,Microsoft.Azure.Management.Sql.Models.DatabaseAuditingPolicyProperties)">
            <summary>
            Verify that the received properties match their expected values
            </summary>
            <param name="expected">The expected value of the properties object</param>
            <param name="actual">The properties object that needs to be checked</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.TestServerAuditingAPIs(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server)">
            <summary>
            The non-boilerplated test code of the APIs for managing the lifecycle of a given server's auditing policy. It is meant to be called with a name of an already existing server (and therefore already existing 
            resource group). This test does not create these resources and does not remove them.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.ChangeServerAuditPolicy(Microsoft.Azure.Management.Sql.Models.ServerAuditingPolicyProperties)">
            <summary>
            Changes the server auditing policy with new values
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.ChangeDataBaseAuditPolicy(Microsoft.Azure.Management.Sql.Models.DatabaseAuditingPolicyProperties)">
            <summary>
            Changes the database auditing policy with new values
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.GetDefaultServerAuditProperties">
            <summary>
            Creates and returns a ServerAuditingPolicyProperties object that holds the default settings for a server auditing policy
            </summary>
            <returns>A ServerAuditingPolicyProperties object with the default audit policy settings</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.VerifyServerAuditingPolicyInformation(Microsoft.Azure.Management.Sql.Models.ServerAuditingPolicyProperties,Microsoft.Azure.Management.Sql.Models.ServerAuditingPolicyProperties)">
            <summary>
            Verify that the received properties match their expected values
            </summary>
            <param name="expected">The expected value of the properties object</param>
            <param name="actual">The properties object that needs to be checked</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.ServerAuditingPolicyLifecycleTest">
            <summary>
            Test for the Auditing policy lifecycle
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2AuditScenarioTest.DatabaseAuditingPolicyLifecycleTest">
            <summary>
            Test for the Auditing policy lifecycle
            </summary>
        </member>
        <member name="T:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest">
            <summary>
            Contains tests for server upgrade test
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.PositiveTestEmptyServer">
            <summary>
            Positive test for server upgrade operation and polling the upgrade status until completed. 
            This test is for empty server
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.PositiveTestWithRecommendedDatabase">
            <summary>
            Positive test for server upgrade operation and polling the upgrade status until completed. 
            This test is for server with 1 Basic database mapped to a new target edition and SLO
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.PositiveTestWithElasticPool">
            <summary>
            Positive test for server upgrade operation and polling the upgrade status until completed. 
            This test is for server with 1 Basic database mapped to a new target edition and SLO
            and 1 Basic database put in an elastic pool
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.PositiveTestWithCancel">
            <summary>
            Positive test for server upgrade operation, getting upgrade status and cancel for empty server.
            Empty server is sufficient since server upgrade with databases are already tested in previous tests.
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.NegativeTest">
            <summary>
            Negative test for the server upgrade operation
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.UpgradeEmptyServer(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server)">
            <summary>
            Implementation of the positive test to upgrade server and poll for upgrade status until the upgrade is completed.
            The test server is empty
            </summary>
            <param name="sqlClient">The SQL Management client</param>
            <param name="resourceGroupName">The resource group containing the server to upgrade</param>
            <param name="server">The server to upgrade</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.UpgradeServerWithRecommendedDatabase(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            Implementation of the positive test to upgrade server and poll for upgrade status until the upgrade is completed.
            The test server has 1 database that will be mapped to a new edition and SLO after the upgrade
            </summary>
            <param name="sqlClient">The SQL Management client</param>
            <param name="resourceGroupName">The resource group containing the server to upgrade</param>
            <param name="server">The server to upgrade</param>
            <param name="recommendedDatabase">The database under server that will be mapped to new edition and SLO</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.UpgradeServerWithElasticPool(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            Implementation of the positive test to upgrade server and poll for upgrade status until the upgrade is completed.
            The test server has 1 database that will be put into a new elastic pool after the upgrade
            </summary>
            <param name="sqlClient">The SQL Management client</param>
            <param name="resourceGroupName">The resource group containing the server to upgrade</param>
            <param name="server">The server to upgrade</param>
            <param name="databaseInElasticPool">The database under server that will be put into a new elastic pool</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.UpgradeAndCancelEmptyServer(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server)">
            <summary>
            Implementation of the positive test to upgrade server, get upgrade status and cancel the upgrade successfully.
            </summary>
            <param name="sqlClient">The SQL Management client</param>
            <param name="resourceGroupName">The resource group containing the server to upgrade</param>
            <param name="server">The server to upgrade</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.UpgradeServerNegative(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            Implementation of the negative test for upgrade server.
            </summary>
            <param name="sqlClient">The SQL Management client</param>
            <param name="resourceGroupName">The resource group containing the server to upgrade</param>
            <param name="server">The server to upgrade</param>
            <param name="database">The database under server that will be mapped to new edition and SLO</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ServerUpgradeScenarioTest.CreateUpgradeStartParameters(System.String,System.Nullable{System.DateTime},Microsoft.Azure.Management.Sql.Models.Database,Microsoft.Azure.Management.Sql.Models.Database)">
            <summary>
            Create upgrade start parameters for testing
            </summary>
            <param name="version">The version to upgrade the server to</param>
            <param name="scheduleUpgradeAfter">The earliest time to upgrade the server</param>
            <param name="recommendedDatabase">The database to map to new edition and SLO. Target SLO and edition are in the constants at the top of this file</param>
            <param name="databaseInElasticPool">The database to be put in new elastic pool. Elastic pool properties are in the constants at the top of this file</param>
            <returns>The server upgrade start parameters object</returns>
        </member>
        <member name="F:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.TestEnvironmentRegion">
            <summary>
            The region in which the tests will create their needed resources
            </summary>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.GetSqlClient(System.Net.Http.DelegatingHandler)">
            <summary>
            Generate a SQL Client from the test base to use.
            </summary>
            <returns>SQL Client</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.GetResourceClient(System.Net.Http.DelegatingHandler)">
            <summary>
            Generate a Resource Management client from the test base to use for managing resource groups.
            </summary>
            <returns>Resource Management client</returns>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.RunServerTestInEnvironment(Sql2.Tests.BasicDelegatingHandler,System.String,System.Action{Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server})">
            <summary>
            Responsible for creating a resource group, and within it a SQL database server, as well as creating a SqlClient for the given handler. 
            Once these are created, this method calls the given test with the created sql client, the names of the resource group and server.
            This method does not removes the created resources !!! it should be run in an undo context that wraps the call to this method.
            </summary>
            <param name="handler">A delegation handler to create a Sql client based on it</param>
            <param name="serverVersion">The version of the server being created</param>
            <param name="test">A function that receives a sql client, names of a created resource group and server</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.RunServerTestInEnvironment(Sql2.Tests.BasicDelegatingHandler,System.String,System.String,System.Action{Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server})">
            <summary>
            Responsible for creating a resource group, and within it a SQL database server, as well as creating a SqlClient for the given handler. 
            Once these are created, this method calls the given test with the created sql client, the names of the resource group and server.
            This method does not removes the created resources !!! it should be run in an undo context that wraps the call to this method.
            </summary>
            <param name="handler">A delegation handler to create a Sql client based on it</param>
            <param name="serverVersion">The version of the server being created</param>
            <param name="serverLocation">The location of the server being created</param>
            <param name="test">A function that receives a sql client, names of a created resource group and server</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.RunTwoServersTestInEnvironment(Sql2.Tests.BasicDelegatingHandler,System.String,System.Boolean,System.Action{Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Server})">
            <summary>
            Responsible for creating a resource group, and within it two SQL database servers, as well as creating a SqlClient for the given handler. 
            Once these are created, this method calls the given test with the created sql client, the names of the resource group and servers.
            This method does not removes the created resources !!! it should be run in an undo context that wraps the call to this method.
            </summary>
            <param name="handler">A delegation handler to create a Sql client based on it</param>
            <param name="serverVersion">The version of the server being created</param>
            <param name="test">A function that receives a sql client, names of a created resource group and server</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.RunTwoServersTestInEnvironment(Sql2.Tests.BasicDelegatingHandler,System.String,System.String,System.String,System.Action{Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Server})">
            <summary>
            Responsible for creating a resource group, and within it two SQL database servers, as well as creating a SqlClient for the given handler. 
            Once these are created, this method calls the given test with the created sql client, the names of the resource group and servers.
            This method does not removes the created resources !!! it should be run in an undo context that wraps the call to this method.
            </summary>
            <param name="handler">A delegation handler to create a Sql client based on it</param>
            <param name="serverVersion">The version of the server being created</param>
            <param name="serverLocation">The location of the server being created</param>
            <param name="secondaryServerLocation">The location of the second server being created</param>
            <param name="test">A function that receives a sql client, names of a created resource group and server</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.RunDatabaseTestInEnvironment(Sql2.Tests.BasicDelegatingHandler,System.String,System.Action{Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database})">
            <summary>
            Responsible for creating a resource group, within it a SQL database server and a database, as well as creating a SqlClient for
            the given handler. 
            Once these are created, this method calls the given test with the created sql client, the names of the resource group, server and
            database.
            This method does not removes the created resources !!! it should be run in an undo context that wraps the call to this method.
            </summary>
            <param name="handler">A delegation handler to create a Sql client based on it</param>
            <param name="serverVersion">The version of the server being created</param>
            <param name="test">A function that receives a sql client, names of a created resource group, server and database</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.RunDatabaseTestInEnvironment(Sql2.Tests.BasicDelegatingHandler,System.String,System.String,System.Action{Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database})">
            <summary>
            Responsible for creating a resource group, within it a SQL database server and a database, as well as creating a SqlClient for
            the given handler. 
            Once these are created, this method calls the given test with the created sql client, the names of the resource group, server and
            database.
            This method does not removes the created resources !!! it should be run in an undo context that wraps the call to this method.
            </summary>
            <param name="handler">A delegation handler to create a Sql client based on it</param>
            <param name="serverVersion">The version of the server being created</param>
            <param name="serverLocation">The location of the server being created</param>
            <param name="test">A function that receives a sql client, names of a created resource group, server and database</param>
        </member>
        <member name="M:Sql2.Tests.ScenarioTests.Sql2ScenarioHelper.RunDbTest(Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,System.Action{Microsoft.Azure.Management.Sql.SqlManagementClient,System.String,Microsoft.Azure.Management.Sql.Models.Server,Microsoft.Azure.Management.Sql.Models.Database})">
            <summary>
            A helper method that creates only a database within the given resource group and server. Once it is created this method calls the
            given test with the sql client and the names of the resource group, server and database.
            </summary>
        </member>
    </members>
</doc>
