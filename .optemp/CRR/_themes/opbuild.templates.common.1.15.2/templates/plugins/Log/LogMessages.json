[
  {
    "code": "None",
    "message": "Unknown error: {0}"
  },
  {
    "code": "ElapsedTime",
    "message": "Step '{0}' finished in '{1}' ms."
  },
  {
    "code": "SetOpenToPublicGitRepositoryUrl",
    "message": "Using '{0}' as the url of the git repository open to public contributors"
  },
  {
    "code": "PublishedToDHS",
    "message": "Published of document '{0}' to document hosting service: {1}, locale {2}, depot name {3}, branch name {4}"
  },
  {
    "code": "RunExternalBuild",
    "message": "Run external build for project: {0}, targets: {1}, properties: {2}"
  },
  {
    "code": "InnerRawLogFile",
    "message": "Inner raw log file details: {0}"
  },
  {
    "code": "PsScriptNotExist",
    "message": "Powershell script file: {0} does not exist. No need to run"
  },
  {
    "code": "NoNeedToRunExternalBuildStep",
    "message": "No need to run External build step"
  },
  {
    "code": "IgnoreStubContributorInformation",
    "message": "Cannot find contributor information for {0} of docset {1}. Ignore stubbing"
  },
  {
    "code": "StartStubContributorInformation",
    "message": "Stubbing contributor information for {0} of docset {1}"
  },
  {
    "code": "EndStubContributorInformation",
    "message": "Contributor information is stubbed for {0} of docset {1}: author {2}, update date: {3}"
  },
  {
    "code": "AbortStubContributorInformation",
    "message": "Cannot find content node {0}. Abort stubbing"
  },
  {
    "code": "SyncGit",
    "message": "Syncing git: {0}"
  },
  {
    "code": "ForcePublish",
    "message": "Force publish request for repository '{0}', build id '{1}', action '{2}'"
  },
  {
    "code": "ValidatePublishRequest",
    "message": "Validating publish request for repository '{0}', build id '{1}', action '{2}'"
  },
  {
    "code": "PullRequestSourceRepoAccessToken",
    "message": "Using access token from user id '{0}' for source repository '{1}' in pull request '{2}' to target repository '{3}'"
  },
  {
    "code": "SyncDownloadPowershellScript",
    "message": "Entry point script downloaded to {0}"
  },
  {
    "code": "SyncUsingConfiguration",
    "message": "Using configuration for sync operation: {0}"
  },
  {
    "code": "ServiceVersionAndEnvironment",
    "message": "Build service version: {0}, worker deployment id: {1}, instance id: {2}, correlation id: {3}"
  },
  {
    "code": "ProcessingDocset",
    "message": "Current docset in processing: '{0}' in output subfolder '{1}"
  },
  {
    "code": "WorkflowRequestProcessing",
    "message": "Current workflow request in processing: {0}"
  },
  {
    "code": "PublishToDHSCacheMiss",
    "message": "[CacheMiss] '{0}' published to DHS: {1}, locale {2}, depot name {3}, branch name {4}"
  },
  {
    "code": "PublishToDHSCacheHit",
    "message": "[CacheHit] '{0}' publishing's skipped because no change since last publishing:  locale: {1}, depot name: {2}, branch name: {3}"
  },
  {
    "code": "PublishToDHSCacheError",
    "message": "[CacheError] Error occurred with operation '{0}': key: {0}, error: {1}"
  },
  {
    "code": "PublishToDHSCacheInsert",
    "message": "[CacheInsert] Cache item '{0}' inserted: type: {1}, key: {2}, hash: {3}"
  },
  {
    "code": "PublishToDHSCacheDelete",
    "message": "[CacheDelete] Cache item deleted: key: {0}"
  },
  {
    "code": "UsingManifest",
    "message": "Using manifest: {0}"
  },
  {
    "code": "CanNotDeleteProtectedBranch",
    "message": "Protected branch {0} can't be deleted in OPS. Its published contents will still be visible on publishing site. Please restore the deleted branch to the same commit id before it is deleted. All protected branches: {1}."
  },
  {
    "code": "CanNotPushToProtectedBranch",
    "message": "Push to protected branch {0} is not permitted in repository {1}. You must unprotect this branch and try again. {2}"
  },
  {
    "code": "DeleteBranchSucceeded",
    "message": "Delete branch: '{0}' of docset '{1}' succeeded."
  },
  {
    "code": "NoDepotNeedBranchDelete",
    "message": "No depot need to delete branch '{0}' of repository '{1}'."
  },
  {
    "code": "StepInfo",
    "message": "Start Step : {0}"
  },
  {
    "code": "SyncRequest",
    "message": "Initializing sync request for sync pair {0}: from repo {1} branch {2} (working branch {3}) to repo {4} branch {5} (working branch {6}), sync strategy {7}"
  },
  {
    "code": "SyncSkippedDueToUnprocessableRequest",
    "message": "Sync operation is skipped for sync pair {0} (repo {1}/syncing branch {2}; repo {3}/syncing branch {4}; forward sync status {5}, backward sync status {6}; latest sync direction {7}) due to unprocessable request: {8}"
  },
  {
    "code": "SyncSkippedDueToSyncStatus",
    "message": "Sync operation is skipped for sync pair {0} (repo {1}/syncing branch {2}; repo {3}/syncing branch {4}; forward sync status {5}, backward sync status {6}; latest sync direction {7}) due to latest sync status: {8}"
  },
  {
    "code": "SyncSkippedDueToSyncStrategy",
    "message": "Sync operation is skipped for sync pair {0} (from repo {1} branch {2}) due to sync strategy {3}"
  },
  {
    "code": "SyncSkippedDueToDummyMergeCommit",
    "message": "Sync operation is skipped for sync pair {0} (from repo {1} branch {2}) because the merge commit {3} contains no actual change."
  },
  {
    "code": "WorkflowSubMessageDispatched",
    "message": "Submessage dispatched in workflow message processor: index {0}, submessage id {1}, category {2}"
  },
  {
    "code": "ManifestNotExist",
    "message": "Build manifest file of docset {0} does not exist. Please check the publish configuration. Details: {1}"
  },
  {
    "code": "ManifestItemDependencyIsInvalid",
    "message": "Build manifest item dependency is invalid with key: {0} and value: {1} in manifest file: {2}"
  },
  {
    "code": "InvalidTypeMapping",
    "message": "Type mapping in docset {0} is invalid"
  },
  {
    "code": "InvalidManifest",
    "message": "Manifest json file '{0}' is invalid. Details: {1}"
  },
  {
    "code": "InvalidJsonLogLine",
    "message": "The log line content '{0}' can't be converted to log item. Details: {1}"
  },
  {
    "code": "DocsetInformationNotFound",
    "message": "Cannot find docset information for repository: {0} and docset name: {1}. Please make sure the docset is correctly provisioned"
  },
  {
    "code": "DocsetPavedOver",
    "message": "Docset {0} in repository {1} is paved over. Please restore the docset to reenable publish"
  },
  {
    "code": "NoDocsetProvisioned",
    "message": "No provisioned docset found in repository {0}. Please provision or restore the docsets if you want to build them"
  },
  {
    "code": "DocsetProvisionedLocaleAndLocaleInGitRepositoryConflict",
    "message": "Use provisioned locale {0} for docset {1} instead of locale {2} in publish configuration"
  },
  {
    "code": "NoDocumentPublished",
    "message": "No document is published"
  },
  {
    "code": "AuthorInformationNotFound",
    "message": "Cannot find author information for specified name '{0}' for file {1}"
  },
  {
    "code": "DirtyWorkspace",
    "message": "The workspace is not clean. Details: {0}"
  },
  {
    "code": "ReinitializeWorkspace",
    "message": "Reinitializing workspace (#{0} retry)... "
  },
  {
    "code": "SyncPullRequestCreated",
    "message": "Pull request is opened from branch '{0}' to '{1}' in repository '{2}'. Please resume sync operation by merging the pull request: {3}."
  },
  {
    "code": "SyncPullRequestCreationFailedUsingUserId",
    "message": "Failed to open pull request using user id {0}: {1}."
  },
  {
    "code": "SyncPullRequestAlreadyExists",
    "message": "Pull request already exists from branch '{0}' to '{1}' in repository '{2}'. Please resume sync operation by merging the pull request: {3}."
  },
  {
    "code": "WorkflowNoSubMessageToHandle",
    "message": "No submessage is generated by workflow request handlers for message {0}."
  },
  {
    "code": "WorkflowNoRequestHandlerFound",
    "message": "No workflow request handlers are available to process workflow requests for message {0}."
  },
  {
    "code": "BackendEngineExceptionError",
    "message": "An exception occurred during the build process. Please retry building your content again. If the issue still happens, open a ticket in http://MSDNHelp and include the following error message for our team to troubleshoot, exception details: {0}"
  },
  {
    "code": "WorkflowTaskTimedOut",
    "message": "Execution of workflow task {0} timed out: {1}"
  },
  {
    "code": "MissingFiles",
    "message": "Some file missing: {0}"
  },
  {
    "code": "InvalidReference",
    "message": "Reference is invalid: {0}"
  },
  {
    "code": "InvalidRelativePath",
    "message": "Relative path {0} is invalid, most likely because {0} is above the docset root. Processing file {1}"
  },
  {
    "code": "ManifestNotSupported",
    "message": "{0} is not supported in publish and also is not defined in mapping types"
  },
  {
    "code": "DuplicateDocsetOutputFolder",
    "message": "Some docset configuration inside publish config has same output folder. Same output folder: {0}"
  },
  {
    "code": "NormalizeFailed",
    "message": "Some documents after build are still malformed xml, can't be shown on OP website. Please ref the other errors to check your content to see if there's any invalid html tag. Otherwise, please open a ticket in http://MSDNHelp."
  },
  {
    "code": "NormalizeTocFailed",
    "message": "Normalize toc file {0} failed. Error: {1}"
  },
  {
    "code": "NormalizeArticleFailed",
    "message": "Normalize file reference for file {0} failed. Error: {1}"
  },
  {
    "code": "NormalizeImageFailed",
    "message": "Normalize image reference for file {0} failed. Error: {1}"
  },
  {
    "code": "PublishToDHSFailed",
    "message": "Publishing of document '{0}' to document hosting service failed with asset id: {1} locale: {2}, depot name: {3}, branch name: {4}. Error: {5}"
  },
  {
    "code": "PublishToDHSFailedAtOpenReadStream",
    "message": "Publishing of document '{0}' failed at SafeOpenReadStream with relative path: {1}. Error: {2}"
  },
  {
    "code": "GetDocumentsFromDHSFailed",
    "message": "Getting documents from document hosting service failed with locale: {0}, depot name: {1}, branch name: {2}. Error: {3}"
  },
  {
    "code": "DeleteDocumentFromDHS",
    "message": "Deletion of document from document hosting service with asset id: {0}, content uri: {1}, locale: {2}, depot name: {3}, branch name: {4}."
  },
  {
    "code": "DeleteDocumentFromDHSFailed",
    "message": "Deletion of document from document hosting service failed with asset id: {0}, content uri: {1}, locale: {2}, depot name: {3}, branch name: {4}. Error: {5}"
  },
  {
    "code": "RunExternalBuildFailed",
    "message": "Build project {0}, target {1}, properties {2} failed: {3}"
  },
  {
    "code": "ReadBuildLogFailed",
    "message": "Error when reading build logs of project {0}, target {1}: {2}"
  },
  {
    "code": "RunPsScriptFailed",
    "message": "Run script {0} with arguments: {1} failed: {2}"
  },
  {
    "code": "RunPsScriptFriendlyFailed",
    "message": "Build failed with error. Please refer to below for details."
  },
  {
    "code": "ResolveContributorInformationFailed",
    "message": "Error when resolving contributor information for file {0}: {1}"
  },
  {
    "code": "PullRequestMergeConflict",
    "message": "Cannot sync git repo to specified state. Please make sure the pull request is mergeable. Details: {0}"
  },
  {
    "code": "SyncGitCheckoutFailure",
    "message": "{0}. Please check first your git repository to make sure that there are no duplicate folder names. Then if the error still happens, please open a ticket in http://MSDNHelp."
  },
  {
    "code": "GitBranchDeleted",
    "message": "Cannot sync git repo because branch {0} has been deleted: {1}"
  },
  {
    "code": "GitRepoUnauthorizedWithSourceCommit",
    "message": "{0}. Possible reason is that the repository is a private repository that requires token to access. The owner of the repository should logon to Open Publishing portal at '{1}' with '{2}' credential to grant Open Publishing Service the token to access the repository. After logon, please update the pull request to trigger the build again"
  },
  {
    "code": "GitRepoUnauthorizedWithoutSourceCommit",
    "message": "Unauthorized to sync git repostiory: {0}."
  },
  {
    "code": "RepositoryInformationNotFound",
    "message": "Cannot find repository information for {0}. Please make sure the repository is correctly provisioned"
  },
  {
    "code": "RepositoryIdNotFound",
    "message": "Cannot find repository id with repository url {0}."
  },
  {
    "code": "SyncInvalidMessageCustomData",
    "message": "Invalid message custom data for sync operation: {0}"
  },
  {
    "code": "SyncPairInformationNotFound",
    "message": "Cannot find sync pair information for pair id {0}. Please make sure the sync pair is correctly provisioned"
  },
  {
    "code": "SyncRepoIndexInformationNotFound",
    "message": "Cannot find sync index information for repository {0}. Please make sure the repository is correctly provisioned for syncing"
  },
  {
    "code": "SyncBlockedDueToBranchConflict",
    "message": "Sync operation is blocked for sync pair {0} because there is conflict in branch '{1}' and branch '{2}' of repository '{3}'. Please resolve the conflict first and resume syncing by merging the pull request."
  },
  {
    "code": "SyncReportNotFoundOrInvalid",
    "message": "Cannot find sync report or the report format is invalid: {0}"
  },
  {
    "code": "SyncErrorCreatingPullRequest",
    "message": "Cannot create pull request for syncing job {0}. Possible reason is the target repo has no common history with the source repo. please open a ticket in http://MSDNHelp with the detailed message: {1}"
  },
  {
    "code": "CannotMergeCommit",
    "message": "Cannot merge commit {0} in branch {1} of repository {2} into branch {3} (commit {4})"
  },
  {
    "code": "MsBuildNotFound",
    "message": "Cannot locate msbuild in following folders: {0}"
  },
  {
    "code": "InvalidBuildToolConfigFile",
    "message": "Build tool's config file: {0} is not valid. Exception: {1}"
  },
  {
    "code": "BuildTableEntityNotFound",
    "message": "Cannot find build table entity for repository {0} and build {1}"
  },
  {
    "code": "PackageBlobDownloadTimeout",
    "message": "Package blob download time out in {0} seconds. url: {1}. Please try again later."
  },
  {
    "code": "PackageBlobUploadTimeout",
    "message": "Package blob upload time out in {0} seconds. url: {1}. Please try again later."
  },
  {
    "code": "BuildIndexTableEntityNotFound",
    "message": "Build with repository Id '{0}', commit Id '{1}' and branch name '{2}' is not found"
  },
  {
    "code": "RepositoryTableEntityNotFound",
    "message": "Cannot find repository table entity for repository {0}"
  },
  {
    "code": "RepositoryStatesTableEntityNotFound",
    "message": "Cannot find repository states table entity for repository {0}"
  },
  {
    "code": "DocsetTableEntityNotFound",
    "message": "Cannot find docset table entity for repository {0} and docset {1}"
  },
  {
    "code": "UserTableEntityNotFound",
    "message": "Cannot find user table entity for user {0}"
  },
  {
    "code": "PullRequestTableEntityNotFound",
    "message": "Cannot find pull request table entity for repository {0} and pull request {1}"
  },
  {
    "code": "PullRequestIdIndexTableEntityNotFound",
    "message": "Cannot find pull request id index table entity for repository {0} and pull request {1}"
  },
  {
    "code": "SiteTableEntityNotFound",
    "message": "Cannot find site table entity for site name {0}"
  },
  {
    "code": "SyncPairTableEntityNotFound",
    "message": "Cannot find sync pair table entity for pair id {0}"
  },
  {
    "code": "LatestProvisionTableEntityNotFound",
    "message": "Cannot find latest provision table entity for repository id {0}"
  },
  {
    "code": "ProvisionTableEntityNotFound",
    "message": "Cannot find provision table entity for repository id {0} and build id {1}"
  },
  {
    "code": "ProjectFileNotFound",
    "message": "Cannot find project file '{0}"
  },
  {
    "code": "RepositoryTableEntityIsAlreadyDeleted",
    "message": "Repository table entity for repository {0} is already deleted"
  },
  {
    "code": "InvalidExternalBuildProperties",
    "message": "External build properties is not in valid format: {0}"
  },
  {
    "code": "UnrecognizedGitRepositoryType",
    "message": "Unrecognized git repository type {0}"
  },
  {
    "code": "UnrecognizedBuildType",
    "message": "Unrecognized build type {0}"
  },
  {
    "code": "MissingSourceGitCommit",
    "message": "Source git commit should be specified for pull request"
  },
  {
    "code": "PullRequestFromDifferentRepositoriesNotSupported",
    "message": "Pull request from different repositories on {0} is not supported"
  },
  {
    "code": "TocFileNotFound",
    "message": "Toc file content: {0} is not valid. Exception: {1}"
  },
  {
    "code": "PublishConfigFileNotFound",
    "message": "Publish service's config file: {0} is not found. Exception: {1}"
  },
  {
    "code": "InvalidPublishConfigFile",
    "message": "Publish service's config file: {0} is not valid. Exception: {1}"
  },
  {
    "code": "InvalidDocsetConfig",
    "message": "Docset config file: {0} is not valid. Exception: {1}"
  },
  {
    "code": "UnableToSaveSubMessagesToAzureTable",
    "message": "Cannot save submessages to Azure table:{0}. Message id: {1}"
  },
  {
    "code": "LocalAndRemoteGitRepositoryMismatch",
    "message": "Local directory '{0}' maps to Git repository '{1}'. Expected Git repository is '{2}"
  },
  {
    "code": "MessageCountMismatchTotalCount",
    "message": "Record count should match total count {0} for message {1}. Message count: {2}"
  },
  {
    "code": "MessageGeneratorError",
    "message": "Message generator '{0}' error: {1}"
  },
  {
    "code": "WorkflowMessageProcessingError",
    "message": "Workflow message processing error for message {0}: {1}"
  },
  {
    "code": "PullRequestStateInvalid",
    "message": "Pull request state {0} is not a valid state for repository {1} and pull request {2}"
  },
  {
    "code": "PullRequestNotFound",
    "message": "Cannot find pull request for repository {0} and pull request {1}. Exception: {2}"
  },
  {
    "code": "RedirectionLoopDetected",
    "message": "Redirection loop detected: {0}"
  },
  {
    "code": "RedirectionMultipleRedirectFrom",
    "message": "Multiple contents redirect to same content ({0}): {1}. Use content ({2}) as redirect from and ignore others."
  },
  {
    "code": "RedirectionInvalidRedirectUrl",
    "message": "Detected invalid redirect url '{0}'. Ignored when generating document id."
  },
  {
    "code": "RedirectionDifferentSiteName",
    "message": "Detected redirect url '{0}' of different site name from '{1}'. Ignored when generating document id."
  },
  {
    "code": "RedirectionDifferentBasePath",
    "message": "Detected redirect url '{0}' of different base path from '{1}'. Ignored when generating document id."
  },
  {
    "code": "RedirectionNonexistentRedirectUrl",
    "message": "Detected redirect url '{0}' points to a nonexistent document. Ignored when generating document id."
  },
  {
    "code": "DeleteBranchFailed",
    "message": "Delete branch: '{0}' of docset '{1}' failed."
  },
  {
    "code": "UnauthorizedOAuthAccess",
    "message": "OAuth authentication credentials were missing or incorrect."
  },
  {
    "code": "UnauthorizedBasicAuthAccess",
    "message": "Authorization header was missing or not in the basic scheme format: Authorization: Basic <base64encodedvalue>"
  },
  {
    "code": "InvalidParameter",
    "message": "Parameter has invalid value or missing required parameter, details: {0}"
  },
  {
    "code": "InvalidStringParameter",
    "message": "Cannot cast input value {0} to string"
  },
  {
    "code": "InvalidRepoIdParameter",
    "message": "{0} is not a valid repo id"
  },
  {
    "code": "InvalidBuildIdParameter",
    "message": "{0} is not a valid build id"
  },
  {
    "code": "InvalidRepositoryDependencyIdParameter",
    "message": "{0} is not a valid repository dependency id"
  },
  {
    "code": "InvalidDocsetIdParameter",
    "message": "{0} is not a valid docset id"
  },
  {
    "code": "InvalidDateTimeParameter",
    "message": "{0} is not a valid datetime of format {1}"
  },
  {
    "code": "InvalidRepositoryScope",
    "message": "{0} is not a valid repository scope, it should be Op or All, default is Op"
  },
  {
    "code": "InvalidBasePath",
    "message": "{0} is not a valid base path of site name {1}"
  },
  {
    "code": "InvalidSiteName",
    "message": "{0} is not a valid site name"
  },
  {
    "code": "DocsetIdMismatch",
    "message": "Docset Ids mismatch between uri parameter and body"
  },
  {
    "code": "MissingVsoEvent",
    "message": "Vso event delivery body json doesn't contain attribute '{0}' or the value is empty"
  },
  {
    "code": "MissingGitHubEvent",
    "message": "GitHub event delivery header doesn't contain header '{0}' or the value is empty"
  },
  {
    "code": "VsoSignatureMismatch",
    "message": "Vso signature '{0}' didn't match"
  },
  {
    "code": "GitHubSignatureMismatch",
    "message": "GitHub signature '{0}' didn't match"
  },
  {
    "code": "UnauthorizedToGitRepo",
    "message": "User cannot access Git repo: {0}"
  },
  {
    "code": "MissingPartitionAttribute",
    "message": "Type {0} doesn't define Partition attribute"
  },
  {
    "code": "GitRepositoryAlreadyExists",
    "message": "Repostiory {0} under {1} account already exists"
  },
  {
    "code": "RepositoryTableEntityAlreadyExists",
    "message": "The repository {0} has already been created"
  },
  {
    "code": "DocsetTableEntityAlreadyExists",
    "message": "Docset with name '{0}' is already created in current repository"
  },
  {
    "code": "DocsetTableEntityConflictsWithBasePath",
    "message": "Docset with site base path '{0}' conflicts with another one with same docset name '{1}' but different site base path '{2}"
  },
  {
    "code": "DocsetTableEntityConflictsWithTenant",
    "message": "Docset with tenant '{0}' conflicts with another one with same docset name '{1}' but different tenant '{2}"
  },
  {
    "code": "InsertOrUpdateUserTableEntityFailed",
    "message": "Insert/Update user {0} to user table failed"
  },
  {
    "code": "InsertOrUpdateAuthenticationTableEntityFailed",
    "message": "Insert/Update user {0} to authentication table failed"
  },
  {
    "code": "InsertOrUpdateUserAADInformationTableEntityFailed",
    "message": "Insert/Update user {0} to user add information table failed"
  },
  {
    "code": "InsertOrUpdateRepositoryTableEntityFailed",
    "message": "Insert/Update repository {0} to repository table failed"
  },
  {
    "code": "InsertOrUpdateRepositoryStatesTableEntityFailed",
    "message": "Insert/Update repository {0} to repository states table failed"
  },
  {
    "code": "InsertOrUpdateDocsetTableEntityFailed",
    "message": "Insert/Update docset {0} to docset table failed"
  },
  {
    "code": "InsertOrUpdateBuildTableEntityFailed",
    "message": "Insert/Update build {0} to build table failed"
  },
  {
    "code": "InsertOrUpdateBuildCommitIndexTableEntityFailed",
    "message": "Insert/Update build {0} to build commit index table failed"
  },
  {
    "code": "InsertOrUpdatePullRequestTableEntityFailed",
    "message": "Insert/Update pull request {0} to pull request table failed"
  },
  {
    "code": "InsertOrUpdatePullRequestCommitIndexTableEntityFailed",
    "message": "Insert/Update pull request {0} to pull request commit index table failed"
  },
  {
    "code": "InsertOrUpdateSyncPairTableEntityFailed",
    "message": "Insert/Update sync pair to sync pair table failed: repo1 id: {0}, repo1 syncing branch: {1}, repo2 id: {2}, repo2 syncing branch: {3}"
  },
  {
    "code": "InsertOrUpdateSyncTableEntityFailed",
    "message": "Insert/Update sync {0} to build table failed"
  },
  {
    "code": "InsertOrUpdateAuthenticationCacheFailed",
    "message": "Insert/Update user {0} to authentication cache failed"
  },
  {
    "code": "InsertOrUpdateSiteTableEntityFailed",
    "message": "Insert/Update site {0} to site table failed"
  },
  {
    "code": "InsertOrUpdateWorkflowMessageTableEntityFailed",
    "message": "Insert/Update message {0} to workflow message table failed"
  },
  {
    "code": "InsertOrUpdateWorkflowSubMessageTableEntityFailed",
    "message": "Insert/Update submessage {0} to workflow submessage table failed"
  },
  {
    "code": "InsertOrUpdateProvisionTableEntityFailed",
    "message": "Insert/Update repostiory {0} to provision table failed"
  },
  {
    "code": "InsertOrUpdateLatestProvisionTableEntityFailed",
    "message": "Insert/Update repostiory {0} to latest provision table failed"
  },
  {
    "code": "UploadGitRepositoryInitializationFilesFailed",
    "message": "Uploading of provisioning initialization files to github/vso failed. Details: {0}"
  },
  {
    "code": "CreateGitRepositoryFailed",
    "message": "Failed to create git repository {0} under account {1} in {2}. You may need to delete it manually if you want to create with this name again. Details: {3}"
  },
  {
    "code": "CreateGitRepositoryWebHookFailed",
    "message": "User {0} doesn't have rights to provision the repository {1}, details: failed to create webhooks in Git repository: {1}"
  },
  {
    "code": "DeleteGitRepositoryWebHookFailed",
    "message": "User {0} doesn't have rights to provision the repository {1}, details: failed to delete webhooks in Git repository: {1}"
  },
  {
    "code": "UnrecognizedSiteName",
    "message": "SiteName '{0}' is not supported"
  },
  {
    "code": "DepotNotExist",
    "message": "Depot '{0}' doesn't exist in document hosting service"
  },
  {
    "code": "DocsetNamesNotFoundInPublishConfig",
    "message": "The following docset names do not exist in {0}: {1}"
  },
  {
    "code": "DocsetNamesDuplicatedInPublishConfig",
    "message": "The following docset names are listed multiple times: {0}"
  },
  {
    "code": "PermissionNotSufficient",
    "message": "User with id {0} does not have sufficient permission to perform the API request. Details: required permission '{1}', actual permission '{2}'. Hint: {3}"
  },
  {
    "code": "PermissionNotSufficientWithoutUserCredential",
    "message": "User without information does not have sufficient permission to perform the API request"
  },
  {
    "code": "PermissionNotSufficientForCreatingPrivateRepository",
    "message": "Your account '{1}' does not have sufficient permission to create private repository '{0}"
  },
  {
    "code": "UnrecognizedGitRepositoryPermissionType",
    "message": "Unrecognized git repository type {0}"
  },
  {
    "code": "UnrecognizedGitCommitType",
    "message": "Unrecognized git commit type {0}"
  },
  {
    "code": "BranchNotFoundInGitRepository",
    "message": "Branch {0} is not found in git repository {1}"
  },
  {
    "code": "BranchFilteredInDefaultBranchPublishConfig",
    "message": "Branch {0} is filtered in your git repository's publish config of {1} branch"
  },
  {
    "code": "UnsupportedGitActivityEvent",
    "message": "Git activity event {0} of {1} is not supported"
  },
  {
    "code": "HttpsRequired",
    "message": "Https required for accessing Open Publishing Build Rest Api Service"
  },
  {
    "code": "UnsupportedProjectGetOperation",
    "message": "Only Vso supports get projects operation"
  },
  {
    "code": "InvalidQueryCount",
    "message": "Build/Pull Request query count must be an integer of larger than 0 and smaller or equal than {0}"
  },
  {
    "code": "FailedToDispatchMessage",
    "message": "Dispatch message {0} failed, details: {1}"
  },
  {
    "code": "DocsetParameterForCreationNotProvided",
    "message": "Area, Theme, Tenant and BasePath are not provided for creating a new docset"
  },
  {
    "code": "CreateGitRepositoryBranchFailed",
    "message": "Creating branch '{0}' based on commit sha '{1}' failed, details: {2}"
  },
  {
    "code": "InvalidBranchName",
    "message": "Branch name '{0}' is invalid, details: {1}. Possible reason is that branch name contains invalid characters: '/, \\, #, ? and control characters"
  },
  {
    "code": "CreateGitRepositoryInitializationFilesNotSupportedForVso",
    "message": "Currently we don't support creating ititializatoin files in Vso repository, please use create repository or import repository instead"
  },
  {
    "code": "ProvisionAlreadyInProcessing",
    "message": "The provision request trigger by you since this repository {0} is already triggered by {1} with status {2}"
  },
  {
    "code": "GitHubOAuthLoginFailed",
    "message": "GitHub OAuth login failed with authorization code {0}. Please retry it later. If the issue still happens, please check the GitHub system status at https://status.github.com/."
  },
  {
    "code": "ProvisionUpdateStepFailed",
    "message": "The provision message process update the step to {1} failed, message id {0}"
  },
  {
    "code": "ProvisionProgressFailed",
    "message": "Provision failed at step {1}, message id: {0}, details: {2}."
  },
  {
    "code": "NullOrEmptyCommitId",
    "message": "The commit id is null or empty with repository id: {0} and branch name: {1}."
  },
  {
    "code": "NoActionTriggeredForDependent",
    "message": "There is no action triggered for repository id: {0} and branch name: {1}."
  },
  {
    "code": "DependencyNotFound",
    "message": "Cannot find dependency with dependent repo id: {0}, dependent branch: {1}, dependency repo url: {2}, dependency branch: {3}."
  },
  {
    "code": "ProvisionStepSkipped",
    "message": "Since no change in step '{0}', execution of step '{0}' will be skipped in provisioning repository: {1}."
  },
  {
    "code": "AADOAuthLoginFailed",
    "message": "AAD OAuth login failed with authorization code {0}. Please retry login later."
  },
  {
    "code": "UnauthorizedAADAccess",
    "message": "AAD authentication credential is missing or incorrect."
  },
  {
    "code": "DependencyTableEntityNotFound",
    "message": "Cannot find dependency table entity with repository url: {0}, branch name: {1}."
  },
  {
    "code": "RepositoryNotProvisioned",
    "message": "The repository {0} was not provisioned yet. Please contact Open Publishing Build team <OPBuild@microsoft.com> to provision it first before you create dependency on it."
  },
  {
    "code": "InvalidReferenceToBranchNameParameter",
    "message": "{0} is not a valid referenceTo branch name"
  },
  {
    "code": "CreateOrUpdateDependencyFailed",
    "message": "Failed to create or update dependency with dependent repo id: {0}, dependent branch: {1}, dependency repo url: {2}, dependency branch: {3}."
  },
  {
    "code": "SavePublishingDocsetsInformationFailed",
    "message": "Failed to save publishing docsets information for message id {0}."
  },
  {
    "code": "DuplicatePathInDependentRepositories",
    "message": "Dependent repositories are invalid in publish config: Don't set more than one dependent repositories with same path_to_root. Error path_to_root: {0}. Duplicate url: {1}"
  },
  {
    "code": "NoGitDocsetFound",
    "message": "Cannot find any docset for repository {0}. Skip provision with reference."
  },
  {
    "code": "GetGitDocsetsFailed",
    "message": "Failed to get docsets from git for repository {0}. Details: {1}."
  },
  {
    "code": "GetOpDocsetsFailed",
    "message": "Failed to get docsets from table for repository {0}. Details: {1}."
  },
  {
    "code": "ErrorHappenedInDependencyMessageGenerate",
    "message": "Error happened when trigger dependency build for repository: {0}. Exception: {1}"
  },
  {
    "code": "DocsetsNotDeletedUnderRepository",
    "message": "Repostiory {0} can not be deleted since its docset(s) {1} haven't been deleted."
  }
]